"job_name","timestamp","action_name","agent_name","artifacts_s3_uri","cost_estimate","duration_seconds","error_message","inference_id","model_id","prompt","response","session_id","status","tokens_used"
"job-friend-agent-20231215-143022","2025-10-16T02:00:28.563396Z","generate_openapi_schema","code-generator","s3://autoninja-artifacts-784327326356-production/job-friend-agent-20231215-143022/code/code-generator/openapi_schema.yaml","0","0.019445180892944336","null","code-generator-generate_openapi_schema-1760580028563","lambda-function","""{""""messageVersion"""": """"1.0"""", """"parameters"""": [], """"sessionId"""": """"test-session-20251015220016"""", """"agent"""": {""""name"""": """"autoninja-code-generator-production"""", """"version"""": """"DRAFT"""", """"id"""": """"JYHLGG522G"""", """"alias"""": """"TSTALIASID""""}, """"actionGroup"""": """"code-generator-actions"""", """"sessionAttributes"""": {}, """"promptSessionAttributes"""": {}, """"inputText"""": """"Please generate an OpenAPI 3.0 schema for this action group:\n\n{\n  \""""agent_name\"""": \""""friend-agent\"""",\n  \""""actions\"""": [\n    {\n      \""""name\"""": \""""chat\"""",\n      \""""description\"""": \""""Handle chat interactions with the user\"""",\n      \""""parameters\"""": [\n        \""""user_input\"""",\n        \""""session_id\""""\n      ]\n    },\n    {\n      \""""name\"""": \""""get_mood\"""",\n      \""""description\"""": \""""Get the user's current mood\"""",\n      \""""parameters\"""": [\n        \""""session_id\""""\n      ]\n    }\n  ]\n}\n\nInclude all endpoints, parameters, and request/response schemas."""", """"httpMethod"""": """"POST"""", """"apiPath"""": """"/generate-openapi-schema"""", """"requestBody"""": {""""content"""": {""""application/json"""": {""""properties"""": [{""""name"""": """"action_group_spec"""", """"type"""": """"string"""", """"value"""": """"{\""""agent_name\"""": \""""friend-agent\"""", \""""actions\"""": [{\""""name\"""": \""""chat\"""", \""""description\"""": \""""Handle chat interactions with the user\"""", \""""parameters\"""": [\""""user_input\"""", \""""session_id\""""]}, {\""""name\"""": \""""get_mood\"""", \""""description\"""": \""""Get the user's current mood\"""", \""""parameters\"""": [\""""session_id\""""]}]}""""}, {""""name"""": """"job_name"""", """"type"""": """"string"""", """"value"""": """"job-friend-agent-20231215-143022""""}]}}}}""","""{""""job_name"""": """"job-friend-agent-20231215-143022"""", """"openapi_schema"""": """"openapi: 3.0.0\ninfo:\n  title: Friend Agent Action Group API\n  description: API for friend-agent agent actions\n  version: 1.0.0\n\npaths:\n  /chat:\n    post:\n      summary: Handle chat interactions with the user\n      description: Handle chat interactions with the user\n      operationId: chat\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - user_input\n                - session_id\n              properties:\n                user_input:\n                  type: string\n                  description: User Input\n                session_id:\n                  type: string\n                  description: Session Id\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    type: string\n                    description: Action response\n                  session_id:\n                    type: string\n                    description: Session identifier\n                  status:\n                    type: string\n                    description: Status of operation\n        '400':\n          description: Invalid request\n        '500':\n          description: Internal server error\n\n  /get-mood:\n    post:\n      summary: Get the user's current mood\n      description: Get the user's current mood\n      operationId: get_mood\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - session_id\n              properties:\n                session_id:\n                  type: string\n                  description: Session Id\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    type: string\n                    description: Action response\n                  session_id:\n                    type: string\n                    description: Session identifier\n                  status:\n                    type: string\n                    description: Status of operation\n        '400':\n          description: Invalid request\n        '500':\n          description: Internal server error\n\n"""", """"status"""": """"success""""}""","test-session-20251015220016","success","0"
"job-friend-20250115-143000","2025-10-16T01:59:24.722994Z","generate_agent_config","code-generator","s3://autoninja-artifacts-784327326356-production/job-friend-20250115-143000/code/code-generator/agent_config.json","0","0.0070476531982421875","null","code-generator-generate_agent_config-1760579964722","lambda-function","""{""""messageVersion"""": """"1.0"""", """"parameters"""": [], """"sessionAttributes"""": {}, """"promptSessionAttributes"""": {}, """"sessionId"""": """"test-session-20251015215916"""", """"agent"""": {""""name"""": """"autoninja-code-generator-production"""", """"version"""": """"DRAFT"""", """"id"""": """"JYHLGG522G"""", """"alias"""": """"TSTALIASID""""}, """"actionGroup"""": """"code-generator-actions"""", """"httpMethod"""": """"POST"""", """"apiPath"""": """"/generate-agent-config"""", """"requestBody"""": {""""content"""": {""""application/json"""": {""""properties"""": [{""""name"""": """"requirements"""", """"type"""": """"string"""", """"value"""": """"{\n  \""""agent_purpose\"""": \""""Friend agent for companionship\"""",\n  \""""system_prompts\"""": \""""You are a friendly AI companion. Be supportive and engaging.\"""",\n  \""""architecture_requirements\"""": {\n    \""""bedrock\"""": {\n      \""""foundation_model\"""": \""""anthropic.claude-sonnet-4-5-20250929-v1:0\"""",\n      \""""action_groups\"""": 1\n    }\n  }\n}""""}, {""""name"""": """"job_name"""", """"type"""": """"string"""", """"value"""": """"job-friend-20250115-143000""""}]}}}, """"inputText"""": """"Please generate Bedrock Agent configuration for a friend agent with these requirements:\n\n{\n  \""""agent_purpose\"""": \""""Friend agent for companionship\"""",\n  \""""system_prompts\"""": \""""You are a friendly AI companion. Be supportive and engaging.\"""",\n  \""""architecture_requirements\"""": {\n    \""""bedrock\"""": {\n      \""""foundation_model\"""": \""""anthropic.claude-sonnet-4-5-20250929-v1:0\"""",\n      \""""action_groups\"""": 1\n    }\n  }\n}\n\nInclude agent name, instructions, foundation model, and action groups.""""}""","""{""""job_name"""": """"job-friend-20250115-143000"""", """"agent_config"""": {""""agentName"""": """"friend-agent-for-companionship"""", """"foundationModel"""": """"anthropic.claude-sonnet-4-5-20250929-v1:0"""", """"instruction"""": """"You are a friendly AI companion. Be supportive and engaging."""", """"description"""": """"Friend agent for companionship"""", """"idleSessionTTLInSeconds"""": 1800, """"actionGroups"""": [{""""actionGroupName"""": """"friend-agent-for-companionship-actions"""", """"description"""": """"Action group for Friend agent for companionship"""", """"actionGroupExecutor"""": {""""lambda"""": """"${LambdaFunctionArn}""""}, """"apiSchema"""": {""""s3"""": {""""s3BucketName"""": """"${SchemaBucket}"""", """"s3ObjectKey"""": """"friend-agent-for-companionship-schema.yaml""""}}}]}, """"status"""": """"success""""}""","test-session-20251015215916","success","0"
"job-friend-20240115-143500","2025-10-16T01:58:27.938547Z","generate_lambda_code","code-generator","s3://autoninja-artifacts-784327326356-production/job-friend-20240115-143500/code/code-generator/lambda_code.json","0","0.1064140796661377","null","code-generator-generate_lambda_code-1760579907938","lambda-function","""{""""messageVersion"""": """"1.0"""", """"parameters"""": [], """"sessionAttributes"""": {}, """"promptSessionAttributes"""": {}, """"sessionId"""": """"test-session-20251015215816"""", """"agent"""": {""""name"""": """"autoninja-code-generator-production"""", """"version"""": """"DRAFT"""", """"id"""": """"JYHLGG522G"""", """"alias"""": """"TSTALIASID""""}, """"actionGroup"""": """"code-generator-actions"""", """"inputText"""": """"Please generate Lambda function code for a friend agent with these requirements:\n\n{\n  \""""agent_purpose\"""": \""""Friend agent for companionship\"""",\n  \""""capabilities\"""": [\n    \""""Natural language conversation\"""",\n    \""""Emotional support\""""\n  ],\n  \""""interactions\"""": [\n    \""""Text-based conversation\""""\n  ],\n  \""""data_needs\"""": [\n    \""""Session state management\""""\n  ],\n  \""""integrations\"""": [\n    \""""AWS Bedrock Agent runtime\""""\n  ],\n  \""""system_prompts\"""": \""""Be friendly and supportive\"""",\n  \""""lambda_requirements\"""": {\n    \""""runtime\"""": \""""python3.12\"""",\n    \""""memory\"""": 512,\n    \""""timeout\"""": 60,\n    \""""environment_variables\"""": {\n      \""""LOG_LEVEL\"""": \""""INFO\""""\n    },\n    \""""actions\"""": [\n      {\n        \""""name\"""": \""""chat\"""",\n        \""""description\"""": \""""Handle chat interactions\"""",\n        \""""parameters\"""": [\n          \""""user_input\"""",\n          \""""session_id\""""\n        ]\n      }\n    ]\n  }\n}\n\nGenerate production-ready Python code with error handling and logging."""", """"httpMethod"""": """"POST"""", """"apiPath"""": """"/generate-lambda-code"""", """"requestBody"""": {""""content"""": {""""application/json"""": {""""properties"""": [{""""name"""": """"requirements"""", """"type"""": """"string"""", """"value"""": """"{\""""agent_purpose\"""":\""""Friend agent for companionship\"""",\""""capabilities\"""":[\""""Natural language conversation\"""",\""""Emotional support\""""],\""""interactions\"""":[\""""Text-based conversation\""""],\""""data_needs\"""":[\""""Session state management\""""],\""""integrations\"""":[\""""AWS Bedrock Agent runtime\""""],\""""system_prompts\"""":\""""Be friendly and supportive\"""",\""""lambda_requirements\"""":{\""""runtime\"""":\""""python3.12\"""",\""""memory\"""":512,\""""timeout\"""":60,\""""environment_variables\"""":{\""""LOG_LEVEL\"""":\""""INFO\""""},\""""actions\"""":[{\""""name\"""":\""""chat\"""",\""""description\"""":\""""Handle chat interactions\"""",\""""parameters\"""":[\""""user_input\"""",\""""session_id\""""]}]}}""""}, {""""name"""": """"job_name"""", """"type"""": """"string"""", """"value"""": """"job-friend-20240115-143500""""}]}}}}""","""{""""job_name"""": """"job-friend-20240115-143500"""", """"lambda_code"""": {""""handler.py"""": """"\""""\""""\""""\nGenerated Lambda Function\nPurpose: Friend agent for companionship\n\""""\""""\""""\nimport json\nimport os\nimport time\nfrom typing import Dict, Any, Optional\n\n# Initialize logger\nimport logging\nlogger = logging.getLogger()\nlogger.setLevel(os.environ.get('LOG_LEVEL', 'INFO'))\n\n\ndef lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:\n    \""""\""""\""""\n    Main Lambda handler for generated agent.\n    \n    Args:\n        event: Bedrock Agent input event\n        context: Lambda context\n        \n    Returns:\n        Bedrock Agent response event\n    \""""\""""\""""\n    start_time = time.time()\n    \n    try:\n        # Parse Bedrock Agent event\n        api_path = event.get('apiPath', '')\n        http_method = event.get('httpMethod', 'POST')\n        action_group = event.get('actionGroup', 'generated-actions')\n        session_id = event.get('sessionId', 'unknown')\n        \n        # Extract parameters from request body\n        request_body = event.get('requestBody', {})\n        content = request_body.get('content', {})\n        json_content = content.get('application/json', {})\n        properties = json_content.get('properties', [])\n        \n        # Convert properties array to dict\n        params = {prop['name']: prop['value'] for prop in properties}\n        \n        logger.info(f\""""Processing request for apiPath: {api_path}\"""")\n        \n        # Route to appropriate action handler\n        result = handle_action(api_path, params, session_id)\n        \n        # Format successful response\n        response = {\n            'messageVersion': '1.0',\n            'response': {\n                'actionGroup': action_group,\n                'apiPath': api_path,\n                'httpMethod': http_method,\n                'httpStatusCode': 200,\n                'responseBody': {\n                    'application/json': {\n                        'body': json.dumps(result)\n                    }\n                }\n            }\n        }\n        \n        logger.info(f\""""Request completed successfully in {time.time() - start_time:.2f}s\"""")\n        return response\n        \n    except Exception as e:\n        logger.error(f\""""Error processing request: {str(e)}\"""")\n        \n        # Return error response\n        return {\n            'messageVersion': '1.0',\n            'response': {\n                'actionGroup': event.get('actionGroup', 'generated-actions'),\n                'apiPath': event.get('apiPath', '/'),\n                'httpMethod': event.get('httpMethod', 'POST'),\n                'httpStatusCode': 500,\n                'responseBody': {\n                    'application/json': {\n                        'body': json.dumps({\n                            'error': str(e),\n                            'status': 'error'\n                        })\n                    }\n                }\n            }\n        }\n\n\ndef handle_action(api_path: str, params: Dict[str, str], session_id: str) -> Dict[str, Any]:\n    \""""\""""\""""\n    Handle action based on API path.\n    \n    Args:\n        api_path: The API path from the request\n        params: Extracted parameters\n        session_id: Bedrock session ID\n        \n    Returns:\n        Dict with action results\n    \""""\""""\""""\n    # Implement action logic here\n    user_input = params.get('user_input', '')\n    \n    # Process the request based on capabilities\n    # Capabilities: Natural language conversation, Emotional support\n    \n    result = {\n        'response': f\""""Processed request: {user_input}\"""",\n        'session_id': session_id,\n        'status': 'success'\n    }\n    \n    return result\n""""}, """"requirements_txt"""": """"boto3>=1.28.0\nbotocore>=1.31.0"""", """"status"""": """"success""""}""","test-session-20251015215816","success","0"

No more testing, we got what we needed. Get all the meta data on the Code Generator. Role, Permission, Foundational model, schema, etc... Every little detail. 1) The Job number will be given by the orchestrator, so all 5 sub-agents should reference 1 job number per job. Orchestrator will be implemented after the fix, so make sure the 5 agents can accept the value.  2)  Make 4 copy of it's lambda, schema, bedrock agent, etc... One by one change only the details to make it unique for the new agent. Such as name, system prompts, etc... Discard the old file after the transfer is complete. 3) The cloudformation template will be based off the code generator. 

