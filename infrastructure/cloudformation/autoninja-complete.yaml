AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AutoNinja - Production-grade serverless multi-agent system built on AWS Bedrock Agents.
  This template deploys a complete supervisor-collaborator architecture with 6 Bedrock Agents
  (1 supervisor + 5 collaborators), 5 Lambda functions, DynamoDB table, S3 bucket, and all
  supporting infrastructure for automated AI agent generation from natural language requests.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - Environment
      - Label:
          default: Bedrock Configuration
        Parameters:
          - BedrockModel
      - Label:
          default: Storage Configuration
        Parameters:
          - DynamoDBBillingMode
          - S3BucketName
      - Label:
          default: Logging Configuration
        Parameters:
          - LogRetentionDays
    ParameterLabels:
      Environment:
        default: Deployment Environment
      BedrockModel:
        default: Bedrock Foundation Model ID
      DynamoDBBillingMode:
        default: DynamoDB Billing Mode
      S3BucketName:
        default: S3 Bucket Name (Optional)
      LogRetentionDays:
        default: CloudWatch Log Retention Period

Parameters:
  Environment:
    Type: String
    Description: Deployment environment for the AutoNinja system
    Default: production
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: Must be production, staging, or development

  BedrockModel:
    Type: String
    Description: Foundation model ID or inference profile ARN for Bedrock Agents
    Default: us.anthropic.claude-sonnet-4-5-20250929-v1:0
    AllowedValues:
      - us.anthropic.claude-sonnet-4-5-20250929-v1:0
    ConstraintDescription: Must be a valid Bedrock inference profile or foundation model ID

  DynamoDBBillingMode:
    Type: String
    Description: Billing mode for DynamoDB table (on-demand recommended for variable workloads)
    Default: PAY_PER_REQUEST
    AllowedValues:
      - PAY_PER_REQUEST
      - PROVISIONED
    ConstraintDescription: Must be PAY_PER_REQUEST or PROVISIONED

  S3BucketName:
    Type: String
    Description: >
      Optional custom name for S3 artifacts bucket. If not specified, will use
      autoninja-artifacts-{AWS::AccountId}. Must be globally unique.
    Default: ''
    AllowedPattern: '^$|^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: >
      Bucket name must be lowercase, start and end with alphanumeric characters,
      and can contain hyphens. Leave empty for auto-generated name.

  LogRetentionDays:
    Type: Number
    Description: Number of days to retain CloudWatch logs
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: Must be a valid CloudWatch Logs retention period

Conditions:
  UseCustomBucketName: !Not [!Equals [!Ref S3BucketName, '']]

Resources:
  # ============================================================================
  # DynamoDB Table for Inference Records
  # ============================================================================
  InferenceRecordsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'autoninja-inference-records-${Environment}'
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: job_name
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: agent_name
          AttributeType: S
      KeySchema:
        - AttributeName: job_name
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SessionIdIndex
          KeySchema:
            - AttributeName: session_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: AgentNameTimestampIndex
          KeySchema:
            - AttributeName: agent_name
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja
        - Key: ManagedBy
          Value: CloudFormation

  # ============================================================================
  # S3 Bucket for Artifacts Storage
  # ============================================================================
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - UseCustomBucketName
        - !Ref S3BucketName
        - !Sub 'autoninja-artifacts-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveOldArtifacts
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: STANDARD_IA
              - TransitionInDays: 180
                StorageClass: GLACIER
            NoncurrentVersionTransitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 365
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja
        - Key: ManagedBy
          Value: CloudFormation

  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt ArtifactsBucket.Arn
              - !Sub '${ArtifactsBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub '${ArtifactsBucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'

  # ============================================================================
  # Lambda Layer for Shared Libraries
  # ============================================================================
  SharedLibrariesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'autoninja-shared-layer-${Environment}'
      Description: Shared libraries for AutoNinja Lambda functions (persistence, models, utilities)
      Content:
        S3Bucket: !Ref ArtifactsBucket
        S3Key: layers/autoninja-shared-layer.zip
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11
        - python3.12
      CompatibleArchitectures:
        - x86_64
        - arm64

  # ============================================================================
  # IAM Roles for Lambda Functions
  # ============================================================================
  
  # Base policy for all Lambda functions (CloudWatch Logs, X-Ray)
  LambdaBaseManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'AutoNinjaLambdaBasePolicy-${Environment}'
      Description: Base permissions for all AutoNinja Lambda functions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudWatchLogsAccess
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*'
          - Sid: XRayAccess
            Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Resource: '*'
          - Sid: DynamoDBAccess
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt InferenceRecordsTable.Arn
              - !Sub '${InferenceRecordsTable.Arn}/index/*'
          - Sid: S3ReadWriteAccess
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub '${ArtifactsBucket.Arn}/*'
          - Sid: S3ListAccess
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !GetAtt ArtifactsBucket.Arn

  # Requirements Analyst Lambda Role
  RequirementsAnalystLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaRequirementsAnalystRole-${Environment}'
      Description: Execution role for Requirements Analyst Lambda function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBaseManagedPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Code Generator Lambda Role
  CodeGeneratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaCodeGeneratorRole-${Environment}'
      Description: Execution role for Code Generator Lambda function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBaseManagedPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Solution Architect Lambda Role
  SolutionArchitectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaSolutionArchitectRole-${Environment}'
      Description: Execution role for Solution Architect Lambda function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBaseManagedPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Quality Validator Lambda Role
  QualityValidatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaQualityValidatorRole-${Environment}'
      Description: Execution role for Quality Validator Lambda function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBaseManagedPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Deployment Manager Lambda Role (requires additional permissions)
  DeploymentManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaDeploymentManagerRole-${Environment}'
      Description: Execution role for Deployment Manager Lambda function with deployment permissions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBaseManagedPolicy
      Policies:
        - PolicyName: DeploymentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudFormationAccess
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:ValidateTemplate
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-generated-*/*'
              - Sid: BedrockAgentAccess
                Effect: Allow
                Action:
                  - bedrock:CreateAgent
                  - bedrock:UpdateAgent
                  - bedrock:DeleteAgent
                  - bedrock:GetAgent
                  - bedrock:ListAgents
                  - bedrock:CreateAgentActionGroup
                  - bedrock:UpdateAgentActionGroup
                  - bedrock:DeleteAgentActionGroup
                  - bedrock:GetAgentActionGroup
                  - bedrock:CreateAgentAlias
                  - bedrock:UpdateAgentAlias
                  - bedrock:DeleteAgentAlias
                  - bedrock:GetAgentAlias
                  - bedrock:PrepareAgent
                  - bedrock:InvokeAgent
                Resource: '*'
              - Sid: IAMPassRole
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutoNinjaGenerated*'
                Condition:
                  StringEquals:
                    'iam:PassedToService':
                      - bedrock.amazonaws.com
                      - lambda.amazonaws.com
              - Sid: IAMRoleManagement
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRolePolicy
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutoNinjaGenerated*'
              - Sid: LambdaManagement
                Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                  - lambda:InvokeFunction
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:autoninja-generated-*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Functions (Placeholder Implementations)
  # ============================================================================
  
  # Requirements Analyst Lambda Function
  RequirementsAnalystFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'autoninja-requirements-analyst-${Environment}'
      Description: Requirements Analyst agent Lambda function (placeholder)
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt RequirementsAnalystLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLibrariesLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTable
          S3_BUCKET_NAME: !Ref ArtifactsBucket
          LOG_LEVEL: INFO
          ENVIRONMENT: !Ref Environment
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'messageVersion': '1.0',
                  'response': {
                      'actionGroup': event.get('actionGroup', 'requirements-analyst-actions'),
                      'apiPath': event.get('apiPath', '/'),
                      'httpMethod': event.get('httpMethod', 'POST'),
                      'httpStatusCode': 200,
                      'responseBody': {
                          'application/json': {
                              'body': json.dumps({'status': 'placeholder', 'message': 'Requirements Analyst placeholder'})
                          }
                      }
                  }
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Code Generator Lambda Function
  CodeGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'autoninja-code-generator-${Environment}'
      Description: Code Generator agent Lambda function (placeholder)
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt CodeGeneratorLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLibrariesLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTable
          S3_BUCKET_NAME: !Ref ArtifactsBucket
          LOG_LEVEL: INFO
          ENVIRONMENT: !Ref Environment
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'messageVersion': '1.0',
                  'response': {
                      'actionGroup': event.get('actionGroup', 'code-generator-actions'),
                      'apiPath': event.get('apiPath', '/'),
                      'httpMethod': event.get('httpMethod', 'POST'),
                      'httpStatusCode': 200,
                      'responseBody': {
                          'application/json': {
                              'body': json.dumps({'status': 'placeholder', 'message': 'Code Generator placeholder'})
                          }
                      }
                  }
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Solution Architect Lambda Function
  SolutionArchitectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'autoninja-solution-architect-${Environment}'
      Description: Solution Architect agent Lambda function (placeholder)
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SolutionArchitectLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLibrariesLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTable
          S3_BUCKET_NAME: !Ref ArtifactsBucket
          LOG_LEVEL: INFO
          ENVIRONMENT: !Ref Environment
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'messageVersion': '1.0',
                  'response': {
                      'actionGroup': event.get('actionGroup', 'solution-architect-actions'),
                      'apiPath': event.get('apiPath', '/'),
                      'httpMethod': event.get('httpMethod', 'POST'),
                      'httpStatusCode': 200,
                      'responseBody': {
                          'application/json': {
                              'body': json.dumps({'status': 'placeholder', 'message': 'Solution Architect placeholder'})
                          }
                      }
                  }
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Quality Validator Lambda Function
  QualityValidatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'autoninja-quality-validator-${Environment}'
      Description: Quality Validator agent Lambda function (placeholder)
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt QualityValidatorLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLibrariesLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTable
          S3_BUCKET_NAME: !Ref ArtifactsBucket
          LOG_LEVEL: INFO
          ENVIRONMENT: !Ref Environment
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'messageVersion': '1.0',
                  'response': {
                      'actionGroup': event.get('actionGroup', 'quality-validator-actions'),
                      'apiPath': event.get('apiPath', '/'),
                      'httpMethod': event.get('httpMethod', 'POST'),
                      'httpStatusCode': 200,
                      'responseBody': {
                          'application/json': {
                              'body': json.dumps({'status': 'placeholder', 'message': 'Quality Validator placeholder'})
                          }
                      }
                  }
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Deployment Manager Lambda Function
  DeploymentManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'autoninja-deployment-manager-${Environment}'
      Description: Deployment Manager agent Lambda function (placeholder)
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt DeploymentManagerLambdaRole.Arn
      Timeout: 900
      MemorySize: 1024
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLibrariesLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTable
          S3_BUCKET_NAME: !Ref ArtifactsBucket
          LOG_LEVEL: INFO
          ENVIRONMENT: !Ref Environment
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'messageVersion': '1.0',
                  'response': {
                      'actionGroup': event.get('actionGroup', 'deployment-manager-actions'),
                      'apiPath': event.get('apiPath', '/'),
                      'httpMethod': event.get('httpMethod', 'POST'),
                      'httpStatusCode': 200,
                      'responseBody': {
                          'application/json': {
                              'body': json.dumps({'status': 'placeholder', 'message': 'Deployment Manager placeholder'})
                          }
                      }
                  }
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Permissions (Allow Bedrock to Invoke)
  # ============================================================================
  # Note: Source ARNs will be added after Bedrock Agents are created
  
  RequirementsAnalystInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RequirementsAnalystFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  CodeGeneratorInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CodeGeneratorFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  SolutionArchitectInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SolutionArchitectFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  QualityValidatorInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QualityValidatorFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  DeploymentManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeploymentManagerFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # ============================================================================
  # IAM Roles for Bedrock Agents
  # ============================================================================
  
  # Requirements Analyst Bedrock Agent Role
  RequirementsAnalystAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaRequirementsAnalystAgentRole-${Environment}'
      Description: Execution role for Requirements Analyst Bedrock Agent
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'
              - Sid: InvokeLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt RequirementsAnalystFunction.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Code Generator Bedrock Agent Role
  CodeGeneratorAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaCodeGeneratorAgentRole-${Environment}'
      Description: Execution role for Code Generator Bedrock Agent
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'
              - Sid: InvokeLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt CodeGeneratorFunction.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Solution Architect Bedrock Agent Role
  SolutionArchitectAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaSolutionArchitectAgentRole-${Environment}'
      Description: Execution role for Solution Architect Bedrock Agent
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'
              - Sid: InvokeLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SolutionArchitectFunction.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Quality Validator Bedrock Agent Role
  QualityValidatorAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaQualityValidatorAgentRole-${Environment}'
      Description: Execution role for Quality Validator Bedrock Agent
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'
              - Sid: InvokeLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt QualityValidatorFunction.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Deployment Manager Bedrock Agent Role
  DeploymentManagerAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaDeploymentManagerAgentRole-${Environment}'
      Description: Execution role for Deployment Manager Bedrock Agent
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'
              - Sid: InvokeLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt DeploymentManagerFunction.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Supervisor Bedrock Agent Role
  SupervisorAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AutoNinjaSupervisorAgentRole-${Environment}'
      Description: Execution role for Supervisor Bedrock Agent (orchestrator)
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'
              - Sid: InvokeCollaboratorAgents
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Collaborator Agents (5 agents)
  # ============================================================================
  
  # Requirements Analyst Bedrock Agent
  RequirementsAnalystAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub 'autoninja-requirements-analyst-${Environment}'
      Description: Requirements Analyst agent - extracts and validates requirements from user requests
      AgentResourceRoleArn: !GetAtt RequirementsAnalystAgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a requirements analyst for the AutoNinja system. Your role is to extract structured
        requirements from user requests for AI agents. You generate requirements for ALL sub-agents
        in the pipeline (Code Generator, Solution Architect, Quality Validator, Deployment Manager).

        When you receive a request:
        1. Extract the job_name parameter from the request
        2. Analyze the user's description to identify agent purpose, capabilities, interactions, data needs, and integrations
        3. Generate comprehensive requirements document covering what each downstream agent needs
        4. Assess complexity (simple/moderate/complex)
        5. Validate completeness of requirements
        6. Return structured requirements in JSON format

        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: requirements-analyst-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt RequirementsAnalystFunction.Arn
          Description: Actions for requirements analysis
          ApiSchema:
            Payload: |
              openapi: 3.0.0
              info:
                title: Requirements Analyst API
                version: 1.0.0
              paths:
                /extract-requirements:
                  post:
                    summary: Extract requirements
                    description: Extract structured requirements from user request
                    operationId: extractRequirements
                    requestBody:
                      required: true
                      content:
                        application/json:
                          schema:
                            type: object
                            required:
                              - job_name
                              - user_request
                            properties:
                              job_name:
                                type: string
                              user_request:
                                type: string
                    responses:
                      '200':
                        description: Success
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                job_name:
                                  type: string
                                requirements:
                                  type: string
                                status:
                                  type: string
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # Code Generator Bedrock Agent
  CodeGeneratorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub 'autoninja-code-generator-${Environment}'
      Description: Code Generator agent - generates Lambda code, agent configs, and OpenAPI schemas
      AgentResourceRoleArn: !GetAtt CodeGeneratorAgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a code generator for the AutoNinja system. Your role is to generate production-ready
        code for AI agents based on requirements.

        IMPORTANT: You MUST use the action group functions to generate code. Do not respond conversationally.

        When you receive a request to generate code:
        1. If job_name is not provided, generate one in format: job-{keyword}-{YYYYMMDD-HHMMSS}
        2. Use the /generate-lambda-code action to generate Lambda function code
        3. Use the /generate-agent-config action to generate Bedrock Agent configuration
        4. Use the /generate-openapi-schema action to generate OpenAPI schemas

        Always call the appropriate action group function. Never just describe what you would do.
      ActionGroups:
        - ActionGroupName: code-generator-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt CodeGeneratorFunction.Arn
          Description: Actions for code generation
          ApiSchema:
            Payload: |
              openapi: 3.0.0
              info:
                title: Code Generator API
                version: 1.0.0
              paths:
                /generate-lambda-code:
                  post:
                    summary: Generate Lambda code
                    description: Generate Lambda function code
                    operationId: generateLambdaCode
                    requestBody:
                      required: true
                      content:
                        application/json:
                          schema:
                            type: object
                            required:
                              - job_name
                              - requirements
                            properties:
                              job_name:
                                type: string
                              requirements:
                                type: string
                    responses:
                      '200':
                        description: Success
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                job_name:
                                  type: string
                                lambda_code:
                                  type: string
                                status:
                                  type: string
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # Solution Architect Bedrock Agent
  SolutionArchitectAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub 'autoninja-solution-architect-${Environment}'
      Description: Solution Architect agent - designs AWS architecture and generates IaC
      AgentResourceRoleArn: !GetAtt SolutionArchitectAgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a solution architect for the AutoNinja system. Your role is to design AWS
        architectures for AI agents based on requirements and code files.

        When you receive requirements and code file references:
        1. Extract the job_name parameter from the request
        2. Review code files from Code Generator (Lambda code, agent config, OpenAPI schemas, system prompts)
        3. Design complete AWS architecture including Bedrock Agent, Lambda functions, data storage, IAM roles
        4. Select appropriate AWS services based on requirements
        5. Generate infrastructure-as-code templates (CloudFormation/Terraform) that reference the code files
        6. Follow AWS best practices and Well-Architected Framework

        Always reference code files from the Code Generator when designing IaC.
        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: solution-architect-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt SolutionArchitectFunction.Arn
          Description: Actions for architecture design
          ApiSchema:
            Payload: |
              openapi: 3.0.0
              info:
                title: Solution Architect API
                version: 1.0.0
              paths:
                /design-architecture:
                  post:
                    summary: Design architecture
                    description: Design AWS architecture
                    operationId: designArchitecture
                    requestBody:
                      required: true
                      content:
                        application/json:
                          schema:
                            type: object
                            required:
                              - job_name
                              - requirements
                            properties:
                              job_name:
                                type: string
                              requirements:
                                type: string
                    responses:
                      '200':
                        description: Success
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                job_name:
                                  type: string
                                architecture:
                                  type: string
                                status:
                                  type: string
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # Quality Validator Bedrock Agent
  QualityValidatorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub 'autoninja-quality-validator-${Environment}'
      Description: Quality Validator agent - validates code quality, security, and compliance
      AgentResourceRoleArn: !GetAtt QualityValidatorAgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a quality validator for the AutoNinja system. Your role is to validate generated
        code for quality, security, and compliance before deployment.

        When you receive generated code:
        1. Extract the job_name parameter from the request
        2. Perform code quality validation (syntax, error handling, logging, structure)
        3. Perform security scanning (hardcoded credentials, IAM permissions, injection vulnerabilities, encryption)
        4. Perform compliance checks (AWS best practices, Lambda best practices, Python PEP 8)
        5. Calculate quality score with extremely low threshold (50% pass rate for testing)
        6. Generate quality report with findings and recommendations

        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: quality-validator-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt QualityValidatorFunction.Arn
          Description: Actions for quality validation
          ApiSchema:
            Payload: |
              openapi: 3.0.0
              info:
                title: Quality Validator API
                version: 1.0.0
              paths:
                /validate-code:
                  post:
                    summary: Validate code
                    description: Validate code quality
                    operationId: validateCode
                    requestBody:
                      required: true
                      content:
                        application/json:
                          schema:
                            type: object
                            required:
                              - job_name
                              - code
                            properties:
                              job_name:
                                type: string
                              code:
                                type: string
                    responses:
                      '200':
                        description: Success
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                job_name:
                                  type: string
                                is_valid:
                                  type: boolean
                                status:
                                  type: string
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # Deployment Manager Bedrock Agent
  DeploymentManagerAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub 'autoninja-deployment-manager-${Environment}'
      Description: Deployment Manager agent - deploys validated agents to AWS
      AgentResourceRoleArn: !GetAtt DeploymentManagerAgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a deployment manager for the AutoNinja system. Your role is to deploy validated
        agents to AWS and verify successful deployment.

        When you receive requirements, code, architecture, and validation green light:
        1. Extract the job_name parameter from the request
        2. Gather all artifacts (requirements, code files, IaC templates, validation report)
        3. Generate complete CloudFormation template including all resources
        4. Deploy CloudFormation stack to AWS
        5. Configure Bedrock Agent with action groups and aliases
        6. Test the deployed agent with sample inputs
        7. Return deployed agent ARN, alias ID, and endpoints

        You can ONLY proceed if the Quality Validator gives a green light.
        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: deployment-manager-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt DeploymentManagerFunction.Arn
          Description: Actions for deployment management
          ApiSchema:
            Payload: |
              openapi: 3.0.0
              info:
                title: Deployment Manager API
                version: 1.0.0
              paths:
                /deploy-stack:
                  post:
                    summary: Deploy stack
                    description: Deploy CloudFormation stack
                    operationId: deployStack
                    requestBody:
                      required: true
                      content:
                        application/json:
                          schema:
                            type: object
                            required:
                              - job_name
                              - template
                            properties:
                              job_name:
                                type: string
                              template:
                                type: string
                    responses:
                      '200':
                        description: Success
                        content:
                          application/json:
                            schema:
                              type: object
                              properties:
                                job_name:
                                  type: string
                                stack_id:
                                  type: string
                                status:
                                  type: string
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # ============================================================================
  # Bedrock Collaborator Agent Aliases
  # ============================================================================
  
  RequirementsAnalystAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt RequirementsAnalystAgent.AgentId
      AgentAliasName: production
      Description: Production alias for Requirements Analyst agent
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  CodeGeneratorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt CodeGeneratorAgent.AgentId
      AgentAliasName: production
      Description: Production alias for Code Generator agent
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  SolutionArchitectAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt SolutionArchitectAgent.AgentId
      AgentAliasName: production
      Description: Production alias for Solution Architect agent
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  QualityValidatorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt QualityValidatorAgent.AgentId
      AgentAliasName: production
      Description: Production alias for Quality Validator agent
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  DeploymentManagerAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt DeploymentManagerAgent.AgentId
      AgentAliasName: production
      Description: Production alias for Deployment Manager agent
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # ============================================================================
  # Bedrock Supervisor Agent
  # ============================================================================
  
  SupervisorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub 'autoninja-supervisor-${Environment}'
      Description: Supervisor agent - orchestrates the complete workflow from user request to deployed agent
      AgentResourceRoleArn: !GetAtt SupervisorAgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are the AutoNinja orchestrator supervisor. Your role is to coordinate the complete workflow
        from user request to deployed agent. For MVP deployment, you will provide guidance and orchestration
        instructions without direct agent collaboration (which will be added in a future update).

        For each user request:
        1. Generate a unique job_name in format: job-{keyword}-{YYYYMMDD-HHMMSS}
        2. Provide comprehensive guidance on the agent generation process
        3. Explain the pipeline: Requirements → Code Generation → Architecture → Validation → Deployment
        4. Return structured information about what would be generated

        Note: Multi-agent collaboration will be enabled once action groups and schemas are implemented.
      # AgentCollaborators will be added after action groups are implemented in task 5
      # AgentCollaborators:
      #   - CollaboratorName: requirements-analyst
      #     AgentDescriptor:
      #       AliasArn: !GetAtt RequirementsAnalystAgentAlias.AgentAliasArn
      #     CollaborationInstruction: |
      #       Use the Requirements Analyst when you need to extract and validate requirements from the user's request.
      #       This agent generates comprehensive requirements for all downstream agents.
      #       Always provide the job_name parameter.
      #     RelayConversationHistory: TO_COLLABORATOR
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # ============================================================================
  # Bedrock Supervisor Agent Alias
  # ============================================================================
  
  SupervisorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt SupervisorAgent.AgentId
      AgentAliasName: production
      Description: Production alias for Supervisor agent
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # ============================================================================
  # CloudWatch Log Groups
  # ============================================================================
  
  # Lambda Function Log Groups
  RequirementsAnalystLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/autoninja-requirements-analyst-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  CodeGeneratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/autoninja-code-generator-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  SolutionArchitectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/autoninja-solution-architect-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  QualityValidatorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/autoninja-quality-validator-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  DeploymentManagerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/autoninja-deployment-manager-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # Bedrock Agent Log Groups
  RequirementsAnalystAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/agents/autoninja-requirements-analyst-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  CodeGeneratorAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/agents/autoninja-code-generator-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  SolutionArchitectAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/agents/autoninja-solution-architect-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  QualityValidatorAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/agents/autoninja-quality-validator-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  DeploymentManagerAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/agents/autoninja-deployment-manager-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  SupervisorAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/agents/autoninja-supervisor-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

Outputs:
  TemplateVersion:
    Description: CloudFormation template version
    Value: '1.0.0'
  
  Environment:
    Description: Deployment environment
    Value: !Ref Environment

  # Supervisor Agent Outputs
  SupervisorAgentId:
    Description: Supervisor Agent ID
    Value: !GetAtt SupervisorAgent.AgentId
    Export:
      Name: !Sub '${AWS::StackName}-SupervisorAgentId'

  SupervisorAgentArn:
    Description: Supervisor Agent ARN
    Value: !GetAtt SupervisorAgent.AgentArn
    Export:
      Name: !Sub '${AWS::StackName}-SupervisorAgentArn'

  SupervisorAgentAliasId:
    Description: Supervisor Agent Alias ID
    Value: !GetAtt SupervisorAgentAlias.AgentAliasId
    Export:
      Name: !Sub '${AWS::StackName}-SupervisorAgentAliasId'

  SupervisorAgentAliasArn:
    Description: Supervisor Agent Alias ARN
    Value: !GetAtt SupervisorAgentAlias.AgentAliasArn
    Export:
      Name: !Sub '${AWS::StackName}-SupervisorAgentAliasArn'

  # Collaborator Agent IDs
  RequirementsAnalystAgentId:
    Description: Requirements Analyst Agent ID
    Value: !GetAtt RequirementsAnalystAgent.AgentId

  CodeGeneratorAgentId:
    Description: Code Generator Agent ID
    Value: !GetAtt CodeGeneratorAgent.AgentId

  SolutionArchitectAgentId:
    Description: Solution Architect Agent ID
    Value: !GetAtt SolutionArchitectAgent.AgentId

  QualityValidatorAgentId:
    Description: Quality Validator Agent ID
    Value: !GetAtt QualityValidatorAgent.AgentId

  DeploymentManagerAgentId:
    Description: Deployment Manager Agent ID
    Value: !GetAtt DeploymentManagerAgent.AgentId

  # Storage Resources
  DynamoDBTableName:
    Description: DynamoDB table name for inference records
    Value: !Ref InferenceRecordsTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  S3BucketName:
    Description: S3 bucket name for artifacts
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  S3BucketArn:
    Description: S3 bucket ARN for artifacts
    Value: !GetAtt ArtifactsBucket.Arn

  # Invocation Command
  InvocationCommand:
    Description: AWS CLI command to invoke the supervisor agent
    Value: !Sub |
      aws bedrock-agent-runtime invoke-agent \
        --agent-id ${SupervisorAgent.AgentId} \
        --agent-alias-id ${SupervisorAgentAlias.AgentAliasId} \
        --session-id $(uuidgen) \
        --input-text "I would like a friend agent" \
        --region ${AWS::Region} \
        response.json

  # Console URLs
  SupervisorAgentConsoleUrl:
    Description: AWS Console URL for Supervisor Agent
    Value: !Sub 'https://console.aws.amazon.com/bedrock/home?region=${AWS::Region}#/agents/${SupervisorAgent.AgentId}'

  DynamoDBConsoleUrl:
    Description: AWS Console URL for DynamoDB table
    Value: !Sub 'https://console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#table?name=${InferenceRecordsTable}'

  S3ConsoleUrl:
    Description: AWS Console URL for S3 bucket
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${ArtifactsBucket}?region=${AWS::Region}'
