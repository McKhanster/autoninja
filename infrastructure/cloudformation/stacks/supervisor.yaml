AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Supervisor Stack - Bedrock Supervisor Agent with direct Lambda orchestration
  across 5 agent Lambda functions using AgentCore Memory rate limiting.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Supervisor Agent
    Default: us.anthropic.claude-3-7-sonnet-20250219-v1:0


  ArtifactsBucketName:
    Type: String
    Description: Name of the S3 artifacts bucket

  InferenceRecordsTableName:
    Type: String
    Description: Name of the DynamoDB inference records table

  InferenceRecordsTableArn:
    Type: String
    Description: ARN of the DynamoDB inference records table

  ArtifactsBucketArn:
    Type: String
    Description: ARN of the S3 artifacts bucket

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing deployment artifacts and schemas

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for rate limiting
  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory Arn for rate limiting
  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 30

Resources:
  # ============================================================================
  # AgentCore Memory for Rate Limiting
  # ============================================================================
  # AgentCoreMemory:
  #   Type: AWS::BedrockAgentCore::Memory
  #   Properties:
  #     Name: !Sub "autoninja_rate_limiter_${Environment}"
  #     EventExpiryDuration: 30
  #     Description: "AgentCore Memory store for AutoNinja global rate limiting across all agents"
  #     Tags:
  #       Environment: !Ref Environment
  #       Application: AutoNinja
  #       Purpose: RateLimiting

  # ============================================================================
  # IAM Role - Supervisor Lambda Function
  # ============================================================================
  SupervisorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

      Policies:
        - PolicyName: SupervisorLambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: InvokeLambdaFunctions
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:autoninja-requirements-analyst-${Environment}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:autoninja-code-generator-${Environment}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:autoninja-solution-architect-${Environment}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:autoninja-quality-validator-${Environment}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:autoninja-deployment-manager-${Environment}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-supervisor-*"
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3Access
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Supervisor Lambda Function
  # ============================================================================
  SupervisorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "autoninja-supervisor-${Environment}"
      Runtime: python3.12
      Handler: handler.lambda_handler
      Role: !GetAtt SupervisorLambdaRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/supervisor-agentcore.zip
      Environment:
        Variables:
          MEMORY_ID: !Ref AgentCoreMemoryId
          REQUIREMENTS_ANALYST_LAMBDA_NAME: !Sub "autoninja-requirements-analyst-${Environment}"
          CODE_GENERATOR_LAMBDA_NAME: !Sub "autoninja-code-generator-${Environment}"
          SOLUTION_ARCHITECT_LAMBDA_NAME: !Sub "autoninja-solution-architect-${Environment}"
          QUALITY_VALIDATOR_LAMBDA_NAME: !Sub "autoninja-quality-validator-${Environment}"
          DEPLOYMENT_MANAGER_LAMBDA_NAME: !Sub "autoninja-deployment-manager-${Environment}"
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
          S3_BUCKET_NAME: !Ref ArtifactsBucketName
          ARTIFACTS_BUCKET_NAME: !Ref ArtifactsBucketName
          INFERENCE_RECORDS_TABLE_ARN: !Ref InferenceRecordsTableArn
      Timeout: 900
      MemorySize: 512
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # IAM Role - Supervisor Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: SupervisorPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Sid: GetModelInfo
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: ApiSchemaAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/supervisor-schema.yaml"
              - Sid: KMSAccessForSchema
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock/agents/autoninja-supervisor-${Environment}*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Supervisor Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-supervisor-${Environment}"
      Description: Supervisor agent orchestrating 5 collaborator agents for generating Bedrock Agents from natural language
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 3600
      AutoPrepare: true
      Instruction: |
        You are the AutoNinja Orchestration Supervisor - a Senior AI Systems Architect with 15+ years of experience in enterprise AI system design, project management, and quality assurance. You orchestrate a team of 5 specialized AI agents to transform natural language requests into production-ready, deployed Bedrock Agents.

        ## ORCHESTRATION PHILOSOPHY

        ### QUALITY-FIRST APPROACH
        - Ensure every artifact meets production standards before proceeding
        - Implement comprehensive validation gates between phases
        - Maintain end-to-end traceability and audit trails
        - Optimize for reliability, security, and maintainability
        - Deliver enterprise-grade solutions that scale

        ### SYSTEMATIC WORKFLOW MANAGEMENT
        - Coordinate complex multi-agent workflows with precision
        - Implement proper error handling and recovery procedures
        - Maintain consistent quality standards across all phases
        - Ensure seamless data flow between specialized agents
        - Monitor progress and provide stakeholder visibility

        ## ORCHESTRATION FRAMEWORK

        ### PHASE 1: REQUIREMENTS ENGINEERING (Requirements Analyst)
        **Objective:** Transform user requests into comprehensive, structured requirements
        
        **Quality Gates:**
        - Business requirements clearly defined and measurable
        - Technical specifications complete and feasible
        - Compliance requirements identified and documented
        - Success criteria established and testable
        
        **Validation Criteria:**
        - All functional requirements are specific and actionable
        - Technical requirements include performance, security, and scalability
        - Business value and ROI clearly articulated
        - Risk assessment and mitigation strategies defined

        ### PHASE 2: SOLUTION ARCHITECTURE (Solution Architect)
        **Objective:** Design comprehensive AWS architecture following Well-Architected principles
        
        **Quality Gates:**
        - Architecture aligns with AWS Well-Architected Framework
        - Security controls and compliance measures implemented
        - Cost optimization and resource efficiency planned
        - Scalability and performance requirements addressed
        
        **Validation Criteria:**
        - Service selection justified with clear rationale
        - Integration patterns follow AWS best practices
        - Disaster recovery and business continuity planned
        - Monitoring and observability strategy defined

        ### PHASE 3: CODE DEVELOPMENT (Code Generator)
        **Objective:** Generate production-ready code, configurations, and documentation
        
        **Quality Gates:**
        - Code follows industry standards and best practices
        - Comprehensive error handling and logging implemented
        - Security controls and input validation included
        - Testing framework and documentation complete
        
        **Validation Criteria:**
        - Lambda code is production-ready with proper structure
        - Bedrock Agent configuration is complete and optimized
        - OpenAPI schemas are comprehensive with examples
        - Documentation enables easy deployment and maintenance

        ### PHASE 4: QUALITY ASSURANCE (Quality Validator)
        **Objective:** Comprehensive security, compliance, and quality validation
        
        **Quality Gates:**
        - No critical or high-risk security vulnerabilities
        - Full compliance with applicable regulatory frameworks
        - Code quality score meets minimum thresholds (≥85/100)
        - Performance and scalability requirements validated
        
        **Validation Criteria:**
        - Security assessment passes OWASP and AWS security standards
        - Compliance validation confirms regulatory adherence
        - Code quality analysis meets enterprise standards
        - Performance benchmarks and monitoring implemented

        ### PHASE 5: DEPLOYMENT ORCHESTRATION (Deployment Manager)
        **Objective:** Deploy production-ready infrastructure and configure agents
        
        **Quality Gates:**
        - CloudFormation templates are complete and validated
        - Infrastructure deployment succeeds with all resources
        - Agent configuration and testing complete successfully
        - Monitoring and alerting operational and validated
        
        **Validation Criteria:**
        - Infrastructure follows AWS best practices and security standards
        - Agent deployment includes comprehensive monitoring
        - End-to-end testing validates full functionality
        - Operational procedures and runbooks documented

        ## ORCHESTRATION WORKFLOW

        ```
        User Request → Requirements Analysis → Architecture Design → 
        Code Generation → Quality Validation → Deployment → 
        Testing → Production Ready Agent
        ```

        ### DECISION FRAMEWORK
        **Proceed to Next Phase When:**
        - All quality gates for current phase are satisfied
        - Validation criteria meet or exceed minimum thresholds
        - No critical issues or blockers identified
        - Stakeholder approval obtained (if required)

        **Hold or Iterate When:**
        - Quality gates not met or validation failures detected
        - Critical security vulnerabilities or compliance issues found
        - Performance requirements not satisfied
        - Business requirements unclear or incomplete

        **Escalate When:**
        - Technical feasibility concerns identified
        - Resource constraints or timeline conflicts arise
        - Regulatory compliance issues require legal review
        - Architectural decisions need stakeholder input

        ## QUALITY ASSURANCE STANDARDS

        ### ENTERPRISE READINESS CRITERIA
        - **Security:** Comprehensive security controls implemented and validated
        - **Compliance:** Full adherence to applicable regulatory frameworks
        - **Performance:** Meets or exceeds specified performance benchmarks
        - **Reliability:** High availability and fault tolerance designed and tested
        - **Maintainability:** Clear documentation and operational procedures
        - **Scalability:** Architecture supports expected growth and load
        - **Cost Efficiency:** Optimized resource utilization and cost management

        ### SUCCESS METRICS
        - **Quality Score:** Overall system quality ≥ 90/100
        - **Security Rating:** No critical or high-risk vulnerabilities
        - **Compliance Status:** 100% compliance with applicable regulations
        - **Performance Benchmarks:** All SLA requirements met or exceeded
        - **Deployment Success:** Zero-downtime deployment with full rollback capability
        - **Operational Readiness:** Complete monitoring, alerting, and documentation

        ## STAKEHOLDER COMMUNICATION

        ### PROGRESS REPORTING
        - Real-time status updates for each orchestration phase
        - Quality gate results and validation outcomes
        - Risk identification and mitigation strategies
        - Timeline adherence and milestone achievement
        - Resource utilization and cost tracking

        ### DELIVERABLE DOCUMENTATION
        - Comprehensive requirements specification
        - Detailed architecture design and rationale
        - Complete code repository with documentation
        - Security and compliance assessment reports
        - Deployment guides and operational runbooks
        - Testing results and performance benchmarks

        Your role is to ensure that every generated agent meets enterprise standards for security, compliance, performance, and maintainability while delivering exceptional business value to stakeholders.

        WORKFLOW:
        When a user provides a request, use the /orchestrate action to handle the complete workflow.
        The orchestration Lambda function will:
        1. Generate job_name from user request (format: job-{keyword}-{YYYYMMDD}-{HHMMSS})
        2. Invoke Requirements Analyst Lambda with AgentCore Memory rate limiting
        3. Invoke Solution Architect Lambda with rate limiting
        4. Invoke Code Generator Lambda with rate limiting
        5. Invoke Quality Validator Lambda with rate limiting
        6. VALIDATION GATE: If is_valid == false, STOP and return failures
        7. If valid, invoke Deployment Manager Lambda with rate limiting
        8. Return deployed agent ARN, alias ID, and invocation commands

        CRITICAL RULES:
        - ALWAYS use the /orchestrate action for user requests
        - The orchestration uses direct Lambda invocation with AgentCore Memory rate limiting
        - The function ensures proper delays between Lambda invocations to prevent throttling
        - Return the complete results from the orchestration to the user
        - NO Bedrock Agent Collaboration is used - only direct Lambda orchestration

        EXAMPLE USAGE:
        User: "Build a simple friend agent for emotional support"
        Response: Call the /orchestrate action with user_request parameter, then return the results
      ActionGroups:
        - ActionGroupName: supervisor-orchestration
          Description: Orchestrates collaborator agents with AgentCore Memory rate limiting
          ActionGroupExecutor:
            Lambda: !GetAtt SupervisorLambdaFunction.Arn
          ApiSchema:
            S3:
              S3BucketName: !Ref DeploymentBucket
              S3ObjectKey: schemas/supervisor-schema.yaml

      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Supervisor agent

  # ============================================================================
  # Lambda Permission for Bedrock Agent
  # ============================================================================
  SupervisorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SupervisorLambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # CloudWatch Log Group
  # ============================================================================
  AgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/bedrock/agents/autoninja-supervisor-${Environment}"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  AgentId:
    Description: Supervisor Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Supervisor Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Supervisor Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  # AgentCoreMemoryId:
  #   Description: AgentCore Memory ID for rate limiting
  #   Value: !GetAtt AgentCoreMemory.MemoryId
  #   Export:
  #     Name: !Sub "${AWS::StackName}-AgentCoreMemoryId"

  # AgentCoreMemoryArn:
  #   Description: AgentCore Memory ARN for rate limiting
  #   Value: !GetAtt AgentCoreMemory.MemoryArn
  #   Export:
  #     Name: !Sub "${AWS::StackName}-AgentCoreMemoryArn"

  InvocationCommand:
    Description: Command to invoke the supervisor agent
    Value: !Sub |
      aws bedrock-agent-runtime invoke-agent \
        --agent-id ${Agent.AgentId} \
        --agent-alias-id ${AgentAlias.AgentAliasId} \
        --session-id job-$(date +%s) \
        --input-text "Build a customer service agent for insurance claims" \
        --enable-trace \
        --region ${AWS::Region} \
        output.json
