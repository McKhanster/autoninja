AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Supervisor Stack - Bedrock Supervisor Agent for multi-agent collaboration
  orchestration across 5 collaborator agents.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Supervisor Agent
    Default: us.anthropic.claude-sonnet-4-5-20250929-v1:0

  RequirementsAnalystAgentArn:
    Type: String
    Description: ARN of Requirements Analyst Agent

  RequirementsAnalystAgentId:
    Type: String
    Description: Agent ID of Requirements Analyst Agent

  RequirementsAnalystAliasId:
    Type: String
    Description: Alias ID of Requirements Analyst Agent

  CodeGeneratorAgentArn:
    Type: String
    Description: ARN of Code Generator Agent

  CodeGeneratorAgentId:
    Type: String
    Description: Agent ID of Code Generator Agent

  CodeGeneratorAliasId:
    Type: String
    Description: Alias ID of Code Generator Agent

  SolutionArchitectAgentArn:
    Type: String
    Description: ARN of Solution Architect Agent

  SolutionArchitectAgentId:
    Type: String
    Description: Agent ID of Solution Architect Agent

  SolutionArchitectAliasId:
    Type: String
    Description: Alias ID of Solution Architect Agent

  QualityValidatorAgentArn:
    Type: String
    Description: ARN of Quality Validator Agent

  QualityValidatorAgentId:
    Type: String
    Description: Agent ID of Quality Validator Agent

  QualityValidatorAliasId:
    Type: String
    Description: Alias ID of Quality Validator Agent

  DeploymentManagerAgentArn:
    Type: String
    Description: ARN of Deployment Manager Agent

  DeploymentManagerAgentId:
    Type: String
    Description: Agent ID of Deployment Manager Agent

  DeploymentManagerAliasId:
    Type: String
    Description: Alias ID of Deployment Manager Agent
  ArtifactsBucketName:
    Type: String
    Description: Name of the S3 artifacts bucket

  InferenceRecordsTableArn:
    Type: String
    Description: ARN of the DynamoDB inference records table

  ArtifactsBucketArn:
    Type: String
    Description: ARN of the S3 artifacts bucket

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing deployment artifacts and schemas

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 30

Resources:
  # ============================================================================
  # AgentCore Memory for Rate Limiting
  # ============================================================================
  AgentCoreMemory:
    Type: AWS::BedrockAgentCore::Memory
    Properties:
      Name: !Sub "autoninja_rate_limiter_${Environment}"
      EventExpiryDuration: 30
      Description: "AgentCore Memory store for AutoNinja global rate limiting across all agents"
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja
        Purpose: RateLimiting

  # ============================================================================
  # IAM Role - Supervisor Lambda Function
  # ============================================================================
  SupervisorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

      Policies:
        - PolicyName: SupervisorLambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/anthropic.claude-sonnet-4-5-20250929-v1:0"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: InvokeCollaborators
                Effect: Allow
                Action:
                  - bedrock-agent-runtime:InvokeAgent
                Resource:
                  - !Ref RequirementsAnalystAgentArn
                  - !Ref CodeGeneratorAgentArn
                  - !Ref SolutionArchitectAgentArn
                  - !Ref QualityValidatorAgentArn
                  - !Ref DeploymentManagerAgentArn
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-supervisor-*"
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3Access
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Supervisor Lambda Function
  # ============================================================================
  SupervisorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "autoninja-supervisor-${Environment}"
      Runtime: python3.12
      Handler: handler.lambda_handler
      Role: !GetAtt SupervisorLambdaRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/supervisor-agentcore.zip
      Environment:
        Variables:
          MEMORY_ID: !GetAtt AgentCoreMemory.MemoryId
          REQUIREMENTS_ANALYST_AGENT_ID: !Ref RequirementsAnalystAgentId
          REQUIREMENTS_ANALYST_ALIAS_ID: !Ref RequirementsAnalystAliasId
          CODE_GENERATOR_AGENT_ID: !Ref CodeGeneratorAgentId
          CODE_GENERATOR_ALIAS_ID: !Ref CodeGeneratorAliasId
          SOLUTION_ARCHITECT_AGENT_ID: !Ref SolutionArchitectAgentId
          SOLUTION_ARCHITECT_ALIAS_ID: !Ref SolutionArchitectAliasId
          QUALITY_VALIDATOR_AGENT_ID: !Ref QualityValidatorAgentId
          QUALITY_VALIDATOR_ALIAS_ID: !Ref QualityValidatorAliasId
          DEPLOYMENT_MANAGER_AGENT_ID: !Ref DeploymentManagerAgentId
          DEPLOYMENT_MANAGER_ALIAS_ID: !Ref DeploymentManagerAliasId
          ARTIFACTS_BUCKET_NAME: !Ref ArtifactsBucketName
          INFERENCE_RECORDS_TABLE_ARN: !Ref InferenceRecordsTableArn
      Timeout: 900
      MemorySize: 512
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # IAM Role - Supervisor Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: SupervisorPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: InvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
              - Sid: GetModelInfo
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: InvokeCollaborators
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Ref RequirementsAnalystAgentArn
                  - !Ref CodeGeneratorAgentArn
                  - !Ref SolutionArchitectAgentArn
                  - !Ref QualityValidatorAgentArn
                  - !Ref DeploymentManagerAgentArn
              - Sid: CollaboratorManagement
                Effect: Allow
                Action:
                  - bedrock:AssociateAgentCollaborator
                  - bedrock:DisassociateAgentCollaborator
                  - bedrock:GetAgentCollaborator
                  - bedrock:ListAgentCollaborators
                  - bedrock:GetAgent
                  - bedrock:GetAgentAlias
                  - bedrock:ListAgents
                  - bedrock:ListAgentAliases
                Resource: "*"
              - Sid: AgentAliasAccess
                Effect: Allow
                Action:
                  - bedrock:GetAgentAlias
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${RequirementsAnalystAgentId}/${RequirementsAnalystAliasId}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${CodeGeneratorAgentId}/${CodeGeneratorAliasId}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${SolutionArchitectAgentId}/${SolutionArchitectAliasId}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${QualityValidatorAgentId}/${QualityValidatorAliasId}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${DeploymentManagerAgentId}/${DeploymentManagerAliasId}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !GetAtt AgentCoreMemory.MemoryArn
              - Sid: ApiSchemaAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/supervisor-schema.yaml"
              - Sid: KMSAccessForSchema
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock/agents/autoninja-supervisor-${Environment}*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Supervisor Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-supervisor-${Environment}"
      Description: Supervisor agent orchestrating 5 collaborator agents for generating Bedrock Agents from natural language
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: SUPERVISOR
      IdleSessionTTLInSeconds: 3600
      AutoPrepare: true
      Instruction: |
        You are the AutoNinja supervisor agent. Your role is to orchestrate 5 collaborator agents
        to generate fully deployed Bedrock Agents from natural language requests.

        WORKFLOW:
        When a user provides a request, use the orchestrate_agents function to handle the complete workflow.
        The orchestration function will:
        1. Generate job_name from user request (format: job-{keyword}-{YYYYMMDD}-{HHMMSS})
        2. Route to Requirements Analyst with AgentCore Memory rate limiting
        3. Route to Code Generator with rate limiting
        4. Route to Solution Architect with rate limiting
        5. Route to Quality Validator with rate limiting
        6. VALIDATION GATE: If is_valid == false, STOP and return failures
        7. If valid, route to Deployment Manager with rate limiting
        8. Return deployed agent ARN, alias ID, and invocation commands

        CRITICAL RULES:
        - ALWAYS use the orchestrate_agents function for user requests
        - The function handles all rate limiting automatically using AgentCore Memory
        - The function ensures 30-second minimum intervals between ALL model invocations
        - The function implements exponential backoff for throttling exceptions
        - Return the complete results from the orchestration function to the user

        EXAMPLE USAGE:
        User: "Build a simple friend agent for emotional support"
        Response: Use orchestrate_agents with user_request parameter, then return the results
      ActionGroups:
        - ActionGroupName: supervisor-orchestration
          Description: Orchestrates collaborator agents with AgentCore Memory rate limiting
          ActionGroupExecutor:
            Lambda: !GetAtt SupervisorLambdaFunction.Arn
          ApiSchema:
            S3:
              S3BucketName: !Ref DeploymentBucket
              S3ObjectKey: schemas/supervisor-schema.yaml
      AgentCollaborators:
        - CollaboratorName: requirements-analyst
          AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${RequirementsAnalystAgentId}/${RequirementsAnalystAliasId}"
          CollaborationInstruction: |
            Invoke this agent to extract and analyze requirements from user requests.
            Pass the job_name and user_request to this agent.
            Wait for structured requirements document before proceeding.
          RelayConversationHistory: TO_COLLABORATOR
        - CollaboratorName: code-generator
          AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${CodeGeneratorAgentId}/${CodeGeneratorAliasId}"
          CollaborationInstruction: |
            Invoke this agent to generate Lambda code, agent configurations, and OpenAPI schemas.
            Pass the job_name and requirements from Requirements Analyst.
            Wait for code generation to complete before proceeding.
          RelayConversationHistory: TO_COLLABORATOR
        - CollaboratorName: solution-architect
          AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${SolutionArchitectAgentId}/${SolutionArchitectAliasId}"
          CollaborationInstruction: |
            Invoke this agent to design AWS architecture and generate CloudFormation templates.
            Pass the job_name, requirements, and code references.
            Wait for architecture design to complete before proceeding.
          RelayConversationHistory: TO_COLLABORATOR
        - CollaboratorName: quality-validator
          AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${QualityValidatorAgentId}/${QualityValidatorAliasId}"
          CollaborationInstruction: |
            Invoke this agent to validate code quality, security, and compliance.
            Pass the job_name and all artifacts (requirements, code, architecture).
            Wait for validation report. Check is_valid field before proceeding to deployment.
          RelayConversationHistory: TO_COLLABORATOR
        - CollaboratorName: deployment-manager
          AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${DeploymentManagerAgentId}/${DeploymentManagerAliasId}"
          CollaborationInstruction: |
            Invoke this agent ONLY if Quality Validator returns is_valid=true.
            Pass the job_name and all validated artifacts.
            Wait for deployment to complete and return deployed agent ARN to user.
          RelayConversationHistory: TO_COLLABORATOR
      Tags:
        Environment: !Ref Environment
        Application: AutoNinja

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Supervisor agent

  # ============================================================================
  # Lambda Permission for Bedrock Agent
  # ============================================================================
  SupervisorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SupervisorLambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # CloudWatch Log Group
  # ============================================================================
  AgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/bedrock/agents/autoninja-supervisor-${Environment}"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  AgentId:
    Description: Supervisor Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Supervisor Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Supervisor Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  AgentCoreMemoryId:
    Description: AgentCore Memory ID for rate limiting
    Value: !GetAtt AgentCoreMemory.MemoryId
    Export:
      Name: !Sub "${AWS::StackName}-AgentCoreMemoryId"

  AgentCoreMemoryArn:
    Description: AgentCore Memory ARN for rate limiting
    Value: !GetAtt AgentCoreMemory.MemoryArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentCoreMemoryArn"

  InvocationCommand:
    Description: Command to invoke the supervisor agent
    Value: !Sub |
      aws bedrock-agent-runtime invoke-agent \
        --agent-id ${Agent.AgentId} \
        --agent-alias-id ${AgentAlias.AgentAliasId} \
        --session-id job-$(date +%s) \
        --input-text "Build a customer service agent for insurance claims" \
        --enable-trace \
        --region ${AWS::Region} \
        output.json
