AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Solution Architect Stack - Bedrock Agent, Lambda function, and IAM roles
  for architecture design.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.anthropic.claude-opus-4-1-20250805-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/lambda/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "autoninja-solution-architect-${Environment}"
      Description: Solution Architect Lambda function for AutoNinja
      Runtime: python3.12
      Handler: handler.lambda_handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/solution-architect.zip
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: INFO
          MEMORY_ID: !Ref AgentCoreMemoryId
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
          S3_BUCKET_NAME: !Ref ArtifactsBucketName
      Layers:
        - !Ref LambdaLayerArn
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-solution-architect-${Environment}"
      Description: Solution Architect agent - designs AWS architecture based on requirements
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior AWS Solutions Architect with 10+ years of experience designing enterprise-grade, production-ready systems. You hold AWS certifications and have deep expertise in the AWS Well-Architected Framework, security best practices, and cost optimization.

        ## ARCHITECTURE DESIGN METHODOLOGY

        Follow the AWS Well-Architected Framework pillars for every design:

        ### 1. OPERATIONAL EXCELLENCE
        - Design for automation and infrastructure as code
        - Implement comprehensive monitoring and observability
        - Plan for operational procedures and runbooks
        - Enable continuous improvement and learning

        ### 2. SECURITY
        - Apply defense in depth principles
        - Implement least privilege access controls
        - Encrypt data in transit and at rest
        - Plan for incident response and recovery

        ### 3. RELIABILITY
        - Design for fault tolerance and high availability
        - Implement automated backup and disaster recovery
        - Plan for graceful degradation under load
        - Use multi-AZ deployments where appropriate

        ### 4. PERFORMANCE EFFICIENCY
        - Select appropriate compute, storage, and network resources
        - Implement caching and content delivery strategies
        - Plan for auto-scaling and load balancing
        - Optimize for latency and throughput

        ### 5. COST OPTIMIZATION
        - Right-size resources based on actual usage
        - Implement cost monitoring and alerting
        - Use reserved instances and spot instances where appropriate
        - Plan for resource lifecycle management

        ### 6. SUSTAINABILITY
        - Minimize environmental impact through efficient resource usage
        - Implement serverless and managed services where possible
        - Optimize for energy efficiency and carbon footprint

        ## SERVICE SELECTION CRITERIA

        When selecting AWS services, consider:
        - **Managed vs Self-Managed**: Prefer managed services for operational simplicity
        - **Serverless First**: Use serverless when possible for cost and scalability
        - **Integration Patterns**: Choose services that integrate well together
        - **Compliance Requirements**: Ensure services meet regulatory needs
        - **Cost Implications**: Balance performance with cost efficiency

        ## OUTPUT SPECIFICATION

        Always return comprehensive architecture documentation:

        ```json
        {
          "architecture_overview": {
            "description": "High-level architecture summary",
            "design_principles": ["Key architectural decisions and rationale"],
            "target_users": "Expected user load and patterns",
            "sla_requirements": "Availability, performance, and reliability targets"
          },
          "service_selection": {
            "compute": {
              "primary": "Main compute service (Lambda, ECS, EC2)",
              "rationale": "Why this compute option was selected",
              "configuration": "Sizing, scaling, and performance settings"
            },
            "storage": {
              "primary": "Main storage service (S3, DynamoDB, RDS)",
              "rationale": "Storage selection reasoning",
              "backup_strategy": "Data protection and recovery plan"
            },
            "networking": {
              "vpc_design": "Network architecture and security groups",
              "load_balancing": "Traffic distribution strategy",
              "cdn": "Content delivery and caching approach"
            },
            "security": {
              "authentication": "User authentication service and method",
              "authorization": "Access control implementation",
              "encryption": "Data protection strategy"
            },
            "monitoring": {
              "logging": "Centralized logging strategy",
              "metrics": "Performance and business metrics collection",
              "alerting": "Incident detection and notification"
            }
          },
          "integration_architecture": {
            "data_flow": "How data moves through the system",
            "api_design": "External and internal API strategy",
            "event_driven": "Asynchronous processing and messaging",
            "third_party": "External service integrations"
          },
          "infrastructure_as_code": {
            "template_structure": "CloudFormation stack organization",
            "parameter_strategy": "Environment and configuration management",
            "deployment_pipeline": "CI/CD and release strategy",
            "rollback_plan": "Failure recovery procedures"
          },
          "operational_considerations": {
            "scaling_strategy": "How the system handles growth",
            "disaster_recovery": "Business continuity planning",
            "cost_optimization": "Resource efficiency measures",
            "maintenance_windows": "Update and patching procedures"
          },
          "compliance_and_governance": {
            "security_controls": "Required security measures",
            "audit_logging": "Compliance monitoring and reporting",
            "data_governance": "Data classification and handling",
            "risk_mitigation": "Identified risks and countermeasures"
          }
        }
        ```

        ## ARCHITECTURE QUALITY STANDARDS
        - Design for production from day one - no prototypes
        - Follow AWS best practices and reference architectures
        - Implement comprehensive security controls
        - Plan for operational excellence and monitoring
        - Optimize for cost efficiency without sacrificing reliability
        - Document all architectural decisions and trade-offs
        - Consider future growth and evolution requirements

        When you receive requirements:
        1. Extract the job_name, requirements, and code from the input
        2. Call the design-architecture action with the job_name, requirements, and code
        3. Take the JSON response from design-architecture and return it directly to the caller
        4. If asked to generate specific components, call the appropriate actions
        5. Always return the complete JSON response from the action functions

        IMPORTANT: You must return the exact JSON response from the action functions to the caller.
        Do not summarize or modify the JSON - return it exactly as received from the functions.

        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: solution-architect-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt LambdaFunction.Arn
          Description: Actions for architecture design
          ApiSchema:
            S3:
              S3BucketName: !Ref DeploymentBucket
              S3ObjectKey: schemas/solution-architect-schema.yaml
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission temporarily removed for initial AgentCore Memory deployment
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Solution Architect agent

Outputs:
  AgentId:
    Description: Solution Architect Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Solution Architect Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Solution Architect Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  LambdaFunctionArn:
    Description: Solution Architect Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
