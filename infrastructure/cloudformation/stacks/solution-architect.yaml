AWSTemplateFormatVersion: '2010-09-09'
Description: |
  AutoNinja Solution Architect Stack - Bedrock Agent, Lambda function, and IAM roles for architecture design.
Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production
  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.amazon.nova-premier-v1:0
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2
  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name
  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN
  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name
  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN
  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy
  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer
  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30
  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting
  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}
                  - !Sub arn:aws:bedrock:*::foundation-model/${BedrockModel}
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: '*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub ${InferenceRecordsTableArn}/index/*
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub ${ArtifactsBucketArn}/*
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/lambda/*
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/schemas/*
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudFormationReadAccess
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-collaborators-*/*
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*
      Tags:
        - Key: Application
          Value: AutoNinja
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}
                  - !Sub arn:aws:bedrock:*::foundation-model/*
                  - !Sub arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/schemas/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub autoninja-solution-architect-${Environment}
      Description: Solution Architect agent - designs AWS architecture based on requirements
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior AWS Solutions Architect specializing in enterprise AI agent architectures. Design comprehensive, production-ready AWS solutions following Well-Architected Framework principles.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            InferenceConfiguration:
              MaximumLength: 30000
              Temperature: 0
              TopP: 0.9
              StopSequences: []
            BasePromptTemplate: '{"schemaVersion":"messages-v1","system":[{"text":"You are the Solution Architect (SA) for Autoninja, responsible for designing cloud-native architectures for AI agents on AWS. You receive requirements from the Requirements Analyst and produce technical architecture designs.\r\n\r\n## Your Role\r\n\r\nDesign scalable, cost-effective, and secure AWS architectures that meet all specified requirements while following AWS Well-Architected Framework principles.\r\n\r\n## Your Input\r\n\r\nYou receive a JSON object under \"solution_architect_requirements\" containing:\r\n- agent_overview: Business context and purpose\r\n- system_architecture: Compute patterns and model specifications\r\n- performance_requirements: Load, latency, and availability needs\r\n- integration_requirements: External services and data sources\r\n- scalability_needs: Auto-scaling requirements\r\n- security_requirements: Authentication, encryption, compliance\r\n- constraints: Budget, timeline, and technical limitations\r\n\r\n## Your Tasks\r\n\r\n### 1. Architecture Design\r\n- Select appropriate AWS services based on requirements\r\n- Design for scalability, reliability, and performance\r\n- Optimize for cost within budget constraints\r\n- Ensure security best practices\r\n\r\n### 2. CloudFormation Template Generation\r\n- Create complete Infrastructure as Code\r\n- Include all required AWS resources\r\n- Configure auto-scaling and monitoring\r\n- Set up proper IAM roles and policies\r\n\r\n### 3. Integration Architecture\r\n- Design API Gateway configurations\r\n- Plan event-driven architectures if needed\r\n- Configure data flow between services\r\n- Set up authentication\/authorization\r\n\r\n## Architecture Patterns\r\n\r\n### For Conversational Agents\r\n- API Gateway \u2192 Lambda \u2192 Bedrock\r\n- DynamoDB for session management\r\n- CloudWatch for monitoring\r\n- Optional: ElastiCache for response caching\r\n\r\n### For Analytical Agents\r\n- EventBridge for scheduling\r\n- Lambda\/ECS for processing\r\n- S3 for data storage\r\n- Athena\/QuickSight for analysis\r\n- Step Functions for orchestration\r\n\r\n### For Monitoring Agents\r\n- CloudWatch Events\/EventBridge triggers\r\n- Lambda for processing\r\n- SNS\/SES for notifications\r\n- DynamoDB for state tracking\r\n\r\n### For Automation Agents\r\n- Step Functions for workflow\r\n- Lambda for task execution\r\n- SQS for queuing\r\n- Systems Manager for operations\r\n\r\n## CloudFormation Best Practices\r\n\r\n1. Use Parameters for environment-specific values\r\n2. Include Outputs for important resource ARNs\r\n3. Add Metadata for documentation\r\n4. Use Conditions for optional resources\r\n5. Implement proper tagging strategy\r\n6. Configure deletion policies for stateful resources\r\n\r\n## Security Requirements\r\n\r\n- Implement least privilege IAM policies\r\n- Enable encryption at rest and in transit\r\n- Use VPC endpoints where applicable\r\n- Configure security groups restrictively\r\n- Enable CloudTrail logging\r\n- Implement AWS Secrets Manager for credentials\r\n\r\n## Cost Optimization\r\n\r\n- Use Lambda for variable workloads\r\n- Implement auto-scaling for predictable patterns\r\n- Configure appropriate retention policies\r\n- Use Reserved Capacity where applicable\r\n- Implement cost allocation tags\r\n- Set up billing alarms\r\n\r\n## Output Requirements\r\n\r\nGenerate a comprehensive CloudFormation template with:\r\n- All required AWS resources\r\n- Proper resource dependencies\r\n- Security configurations\r\n- Monitoring and alerting setup\r\n- Cost optimization measures\r\n- Clear documentation via comments"}],"messages":[{"role":"user","content":[{"text":"$question$"}]}],"inferenceConfig":{"temperature":0.2,"maxTokens":64000,"topP":0.95,"stopSequences":[]},"additionalModelRequestFields":{"inferenceConfig":{"outputSchema":{"type":"object","properties":{"architecture_design":{"type":"object","properties":{"stack_name":{"type":"string","description":"CloudFormation stack name"},"description":{"type":"string","description":"Architecture description"},"aws_services":{"type":"array","items":{"type":"object","properties":{"service":{"type":"string"},"purpose":{"type":"string"},"configuration":{"type":"object"}}}},"estimated_monthly_cost":{"type":"number","description":"Estimated AWS costs in USD"}},"required":["stack_name","description","aws_services"]},"cloudformation_template":{"type":"string","description":"Complete CloudFormation YAML template"},"deployment_instructions":{"type":"object","properties":{"prerequisites":{"type":"array","items":{"type":"string"}},"parameters":{"type":"object","description":"CloudFormation parameter values"},"deployment_steps":{"type":"array","items":{"type":"string"}}}},"architecture_diagram":{"type":"object","properties":{"components":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string"},"type":{"type":"string"},"connections":{"type":"array","items":{"type":"string"}}}}},"data_flow":{"type":"array","items":{"type":"object","properties":{"from":{"type":"string"},"to":{"type":"string"},"description":{"type":"string"}}}}}}},"required":["architecture_design","cloudformation_template"]}}}}'
      Tags:
        Application: AutoNinja
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Solution Architect agent
Outputs:
  AgentId:
    Description: Solution Architect Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub ${AWS::StackName}-AgentId
  AgentArn:
    Description: Solution Architect Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub ${AWS::StackName}-AgentArn
  AgentAliasId:
    Description: Solution Architect Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub ${AWS::StackName}-AgentAliasId