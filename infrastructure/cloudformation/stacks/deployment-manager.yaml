AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Deployment Manager Stack - Bedrock Agent, Lambda function, and IAM roles
  for deployment management.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.amazon.nova-premier-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: CloudFormationAccess
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:ListStacks
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Sid: IAMPassRoleAccess
                Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:ListRolePolicies
                  - iam:ListAttachedRolePolicies
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Resource: "*"
              - Sid: BedrockAgentManagement
                Effect: Allow
                Action:
                  - bedrock:CreateAgent
                  - bedrock:UpdateAgent
                  - bedrock:DeleteAgent
                  - bedrock:GetAgent
                  - bedrock:PrepareAgent
                  - bedrock:CreateAgentAlias
                  - bedrock:UpdateAgentAlias
                  - bedrock:DeleteAgentAlias
                  - bedrock:GetAgentAlias
                  - bedrock:CreateAgentActionGroup
                  - bedrock:UpdateAgentActionGroup
                  - bedrock:DeleteAgentActionGroup
                Resource: "*"
              - Sid: LambdaDeploymentAccess
                Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                  - lambda:ListFunctions
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: "*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*"
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "autoninja-deployment-manager-${Environment}"
  #     Description: Deployment Manager Lambda function for AutoNinja
  #     Runtime: python3.12
  #     Handler: handler.lambda_handler
  #     Code:
  #       S3Bucket: !Ref DeploymentBucket
  #       S3Key: lambda/deployment-manager.zip
  #     Role: !GetAtt LambdaRole.Arn
  #     Timeout: 900
  #     MemorySize: 1024
  #     Environment:
  #       Variables:
  #         LOG_LEVEL: INFO
  #         MEMORY_ID: !Ref AgentCoreMemoryId
  #         DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
  #         S3_BUCKET_NAME: !Ref ArtifactsBucketName
  #         DEPLOYMENT_BUCKET: !Ref DeploymentBucket
  #     Layers:
  #       - !Ref LambdaLayerArn
  #     TracingConfig:
  #       Mode: Active
  #     Tags:
  #       - Key: Application
  #         Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn

      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-deployment-manager-${Environment}"
      Description: Deployment Manager agent - generates CF templates, deploys stacks, configures agents
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior DevOps Engineer and Cloud Infrastructure Specialist specializing in AWS deployments and Infrastructure as Code.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            InferenceConfiguration:
              Temperature: 0.1
              StopSequences: []
            BasePromptTemplate: |
              {
                "schemaVersion": "messages-v1",
                "system": [
                  {
                    "text": "You are a Senior DevOps Engineer and Cloud Infrastructure Specialist specializing in AWS deployments and Infrastructure as Code. Your job is to DEPLOY Bedrock Agents to AWS.\n\n## YOUR ROLE\n\nPackage Lambda code, upload to S3, generate CloudFormation templates, deploy stacks, and return deployment information including agent_id, agent_alias_id, and endpoints.\n\n## DEPLOYMENT PROCESS\n\n1. **Package Lambda code** → Create ZIP file\n2. **Upload to S3** → Lambda ZIP + OpenAPI schema\n3. **Generate CloudFormation** → Template with all resources (Lambda, IAM, Agent, Alias)\n4. **Deploy stack** → Create Agent + Lambda + IAM roles\n5. **Return deployment info** → agent_id, agent_alias_id, endpoints\n\n## DEPLOYMENT BEST PRACTICES\n\n- Use least privilege IAM policies\n- Enable CloudWatch logging for all resources\n- Implement proper error handling in Lambda\n- Use environment-specific naming conventions\n- Add resource tags for cost tracking\n- Include monitoring and alerting\n\n## OUTPUT FORMAT\n\nMake sure your final response is a valid JSON schema follow the below Response Schema:\n\n##Response Schema:\n```json\n{\n  \"cloudformation_template\": \"string\",\n  \"stack_name\": \"string\",\n  \"deployment_status\": \"pending|in_progress|completed|failed\",\n  \"agent_configuration\": {\n    \"agent_id\": \"string\",\n    \"agent_alias_id\": \"string\",\n    \"endpoint_url\": \"string\"\n  },\n  \"resources\": {\n    \"lambda_arn\": \"string\",\n    \"role_arn\": \"string\",\n    \"log_group\": \"string\"\n  },\n  \"s3_locations\": {\n    \"lambda_code\": \"string\",\n    \"schema\": \"string\"\n  },\n  \"validation_results\": {\n    \"template_valid\": true/false,\n    \"resources_created\": [\"string\"],\n    \"tests_passed\": true/false\n  }\n}\n```\n\n$prompt_session_attributes$"
                  }
                ],
                "messages": [
                  {
                    "role": "user",
                    "content": [
                      {
                        "text": "$question$"
                      }
                    ]
                  }
                ],
                "inferenceConfig": {
                  "temperature": 0,
                  "maxTokens": 64000,
                  "topP": 0.9,
                  "stopSequences": []
                },
                "additionalModelRequestFields": {
                  "inferenceConfig": {
                    "outputSchema": {
                      "type": "object",
                      "properties": {
                        "cloudformation_template": {
                          "type": "string",
                          "description": "Complete CloudFormation YAML template as string"
                        },
                        "stack_name": {
                          "type": "string",
                          "description": "Generated stack name"
                        },
                        "deployment_status": {
                          "type": "string",
                          "enum": ["pending", "in_progress", "completed", "failed"],
                          "description": "Current deployment status"
                        },
                        "agent_configuration": {
                          "type": "object",
                          "properties": {
                            "agent_id": {"type": "string"},
                            "agent_alias_id": {"type": "string"},
                            "endpoint_url": {"type": "string"}
                          }
                        },
                        "resources": {
                          "type": "object",
                          "properties": {
                            "lambda_arn": {"type": "string"},
                            "role_arn": {"type": "string"},
                            "log_group": {"type": "string"}
                          }
                        },
                        "s3_locations": {
                          "type": "object",
                          "properties": {
                            "lambda_code": {"type": "string"},
                            "schema": {"type": "string"}
                          }
                        },
                        "validation_results": {
                          "type": "object",
                          "properties": {
                            "template_valid": {"type": "boolean"},
                            "resources_created": {"type": "array"},
                            "tests_passed": {"type": "boolean"}
                          }
                        }
                      },
                      "required": ["cloudformation_template", "stack_name", "deployment_status"]
                    }
                  }
                }
              }
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaFunction
  #     Action: lambda:InvokeFunction
  #     Principal: bedrock.amazonaws.com
  #     SourceAccount: !Ref AWS::AccountId

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Deployment Manager agent

Outputs:
  AgentId:
    Description: Deployment Manager Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Deployment Manager Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Deployment Manager Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  # LambdaFunctionArn:
  #   Description: Deployment Manager Lambda Function ARN
  #   Value: !GetAtt LambdaFunction.Arn
  #   Export:
  #     Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
