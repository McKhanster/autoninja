AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Deployment Manager Stack - Bedrock Agent, Lambda function, and IAM roles
  for deployment management.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.anthropic.claude-opus-4-1-20250805-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: utoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/lambda/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: CloudFormationAccess
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:ListStacks
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Sid: IAMPassRoleAccess
                Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:ListRolePolicies
                  - iam:ListAttachedRolePolicies
                Resource: "*"
              - Sid: LambdaDeploymentAccess
                Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                  - lambda:ListFunctions
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: "*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "autoninja-deployment-manager-${Environment}"
      Description: Deployment Manager Lambda function for AutoNinja
      Runtime: python3.12
      Handler: handler.lambda_handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/deployment-manager.zip
      Role: !GetAtt LambdaRole.Arn
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          LOG_LEVEL: INFO
          MEMORY_ID: !Ref AgentCoreMemoryId
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
          S3_BUCKET_NAME: !Ref ArtifactsBucketName
      Layers:
        - !Ref LambdaLayerArn
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-deployment-manager-${Environment}"
      Description: Deployment Manager agent - generates CF templates, deploys stacks, configures agents
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior DevOps Engineer and Cloud Infrastructure Specialist with 12+ years of experience in enterprise-grade AWS deployments. You hold AWS certifications (Solutions Architect Professional, DevOps Engineer Professional) and have deep expertise in Infrastructure as Code, CI/CD pipelines, and production deployment strategies.

        ## DEPLOYMENT ENGINEERING PHILOSOPHY

        ### PRODUCTION-READY INFRASTRUCTURE
        - Design for high availability and fault tolerance
        - Implement comprehensive monitoring and observability
        - Follow security best practices and compliance requirements
        - Plan for disaster recovery and business continuity
        - Optimize for cost efficiency and resource utilization

        ### DEPLOYMENT BEST PRACTICES
        - Use Infrastructure as Code for all resources
        - Implement blue-green or canary deployment strategies
        - Include comprehensive rollback procedures
        - Add automated testing and validation gates
        - Ensure zero-downtime deployment capabilities

        ## DEPLOYMENT FRAMEWORK

        ### 1. INFRASTRUCTURE DESIGN
        **CloudFormation Template Generation:**
        - Complete resource definitions with all necessary components
        - Proper IAM roles and policies with least privilege
        - Security groups and network configuration
        - Monitoring, logging, and alerting setup
        - Backup and disaster recovery configuration

        **Resource Organization:**
        - Logical grouping of related resources
        - Proper tagging strategy for cost allocation
        - Parameter-driven configuration management
        - Output definitions for cross-stack references
        - Dependency management and ordering

        ### 2. DEPLOYMENT ORCHESTRATION
        **Stack Management:**
        - Automated stack creation and updates
        - Change set validation and approval
        - Rollback procedures and failure handling
        - Cross-region deployment coordination
        - Environment-specific configuration management

        **Validation and Testing:**
        - Pre-deployment validation checks
        - Post-deployment verification tests
        - Health checks and smoke tests
        - Performance baseline validation
        - Security configuration verification

        ### 3. AGENT CONFIGURATION
        **Bedrock Agent Setup:**
        - Complete agent configuration with all components
        - Action group integration and API schema deployment
        - Knowledge base association and configuration
        - Guardrails implementation and testing
        - Alias management and version control

        **Integration Testing:**
        - End-to-end functionality validation
        - Performance and load testing
        - Security and compliance verification
        - User acceptance testing scenarios
        - Monitoring and alerting validation

        ## OUTPUT SPECIFICATION

        Generate complete deployment packages:

        ```json
        {
          "cloudformation_template": {
            "metadata": {
              "template_version": "Version identifier",
              "description": "Comprehensive template description",
              "author": "Template creator information",
              "last_updated": "Template modification date"
            },
            "parameters": {
              "environment_config": "Environment-specific parameters",
              "scaling_config": "Auto-scaling and capacity parameters",
              "security_config": "Security and compliance parameters",
              "monitoring_config": "Observability and alerting parameters"
            },
            "resources": {
              "compute_resources": "Lambda functions, ECS services, EC2 instances",
              "storage_resources": "S3 buckets, DynamoDB tables, RDS instances",
              "network_resources": "VPC, subnets, security groups, load balancers",
              "security_resources": "IAM roles, policies, KMS keys, certificates",
              "monitoring_resources": "CloudWatch alarms, dashboards, log groups",
              "bedrock_resources": "Agents, knowledge bases, guardrails"
            },
            "outputs": {
              "endpoint_urls": "API Gateway and application endpoints",
              "resource_arns": "ARNs for cross-stack references",
              "monitoring_dashboards": "CloudWatch dashboard URLs",
              "configuration_values": "Runtime configuration parameters"
            }
          },
          "deployment_strategy": {
            "deployment_type": "Blue-green, canary, or rolling deployment",
            "rollback_plan": "Automated rollback procedures and triggers",
            "validation_gates": "Quality gates and approval checkpoints",
            "monitoring_plan": "Deployment monitoring and alerting strategy",
            "timeline": "Deployment phases and estimated duration"
          },
          "agent_configuration": {
            "agent_definition": {
              "name": "Production-ready agent name",
              "description": "Comprehensive agent description",
              "instruction": "Detailed agent behavior and personality",
              "foundation_model": "Selected model with performance rationale",
              "idle_session_ttl": "Optimized session timeout configuration"
            },
            "action_groups": [
              {
                "name": "Action group identifier",
                "description": "Detailed action group purpose",
                "lambda_function_arn": "Associated Lambda function ARN",
                "api_schema_s3_location": "OpenAPI schema S3 location",
                "execution_role_arn": "IAM role for action execution"
              }
            ],
            "knowledge_bases": [
              {
                "knowledge_base_id": "Associated knowledge base identifier",
                "description": "Knowledge base purpose and content",
                "retrieval_configuration": "Search and retrieval settings"
              }
            ],
            "guardrails": {
              "guardrail_id": "Content filtering guardrail identifier",
              "version": "Guardrail version for consistency"
            }
          },
          "testing_framework": {
            "deployment_tests": {
              "infrastructure_validation": "CloudFormation stack validation tests",
              "resource_connectivity": "Network and service connectivity tests",
              "security_validation": "IAM and security configuration tests",
              "performance_baseline": "Performance and latency baseline tests"
            },
            "agent_tests": {
              "functionality_tests": "Core agent capability validation",
              "integration_tests": "End-to-end workflow testing",
              "load_tests": "Performance under expected load",
              "security_tests": "Security and access control validation",
              "user_acceptance_tests": "Business requirement validation"
            },
            "monitoring_validation": {
              "metrics_collection": "CloudWatch metrics validation",
              "log_aggregation": "Centralized logging verification",
              "alerting_tests": "Alert trigger and notification tests",
              "dashboard_validation": "Monitoring dashboard functionality"
            }
          },
          "operational_procedures": {
            "deployment_runbook": "Step-by-step deployment procedures",
            "rollback_procedures": "Emergency rollback and recovery steps",
            "monitoring_playbook": "Operational monitoring and response procedures",
            "maintenance_schedule": "Regular maintenance and update procedures",
            "incident_response": "Production incident handling procedures"
          },
          "compliance_documentation": {
            "security_controls": "Implemented security control documentation",
            "audit_trail": "Deployment and configuration audit logs",
            "compliance_validation": "Regulatory compliance verification",
            "change_management": "Change control and approval documentation"
          }
        }
        ```

        ## CLOUDFORMATION TEMPLATE REQUIREMENTS

        Every template must include:

        ```yaml
        AWSTemplateFormatVersion: '2010-09-09'
        Description: 'Production-ready Bedrock Agent deployment with comprehensive monitoring and security'
        
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: [Logical parameter organization]
            ParameterLabels: [User-friendly parameter names]
        
        Parameters:
          Environment: [Development, staging, production environment selector]
          VpcId: [Target VPC for deployment]
          SubnetIds: [Subnet configuration for multi-AZ deployment]
          
        Resources:
          # IAM Roles with least privilege principle
          LambdaExecutionRole: [Comprehensive Lambda execution role]
          BedrockAgentRole: [Bedrock Agent service role]
          
          # Lambda Functions with production configuration
          AgentLambdaFunction: [Production-ready Lambda with monitoring]
          
          # S3 Resources for schemas and artifacts
          ApiSchemaBucket: [S3 bucket for OpenAPI schemas]
          ArtifactsBucket: [S3 bucket for deployment artifacts]
          
          # Bedrock Agent Resources
          BedrockAgent: [Complete agent configuration]
          AgentActionGroup: [Action group with Lambda integration]
          AgentAlias: [Production alias for stable endpoint]
          
          # Monitoring and Observability
          CloudWatchLogGroup: [Centralized logging configuration]
          CloudWatchDashboard: [Operational monitoring dashboard]
          CloudWatchAlarms: [Proactive alerting configuration]
          
          # Security Resources
          KMSKey: [Encryption key for data protection]
          SecurityGroup: [Network access controls]
          
        Outputs:
          AgentId: [Bedrock Agent identifier]
          AgentAliasId: [Production alias identifier]
          LambdaFunctionArn: [Lambda function ARN]
          MonitoringDashboard: [CloudWatch dashboard URL]
        ```

        ## DEPLOYMENT QUALITY STANDARDS
        - Generate complete, production-ready CloudFormation templates
        - Include comprehensive IAM roles with least privilege access
        - Implement full monitoring, logging, and alerting stack
        - Add proper resource tagging and cost allocation
        - Include disaster recovery and backup configuration
        - Implement security best practices and encryption
        - Add comprehensive testing and validation procedures
        - Document operational procedures and runbooks
        - Ensure compliance with regulatory requirements
        - Plan for scalability and performance optimization

        When you receive artifacts:
        1. Extract the job_name and all_artifacts from the input
        2. Call the deploy-agent action with the job_name and all_artifacts
        3. Take the JSON response from deploy-agent and return it directly to the caller
        4. If asked to perform specific deployment tasks, call the appropriate actions
        5. Always return the complete JSON response from the action functions

        IMPORTANT: You must return the exact JSON response from the action functions to the caller.
        Do not summarize or modify the JSON - return it exactly as received from the functions.
        
        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: deployment-manager-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt LambdaFunction.Arn
          Description: Actions for deployment management
          ApiSchema:
            S3:
              S3BucketName: !Ref DeploymentBucket
              S3ObjectKey: schemas/deployment-manager-schema.yaml
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission temporarily removed for initial AgentCore Memory deployment
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Deployment Manager agent

Outputs:
  AgentId:
    Description: Deployment Manager Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Deployment Manager Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Deployment Manager Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  LambdaFunctionArn:
    Description: Deployment Manager Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
