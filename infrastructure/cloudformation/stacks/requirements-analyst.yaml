AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Requirements Analyst Stack - Bedrock Agent, Lambda function, and IAM roles
  for requirements analysis and extraction.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.amazon.nova-premier-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/lambda/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudFormationReadAccess
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-collaborators-*/*"
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*"
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "autoninja-requirements-analyst-${Environment}"
  #     Description: Requirements Analyst Lambda function for AutoNinja
  #     Runtime: python3.12
  #     Handler: handler.lambda_handler
  #     Code:
  #       S3Bucket: !Ref DeploymentBucket
  #       S3Key: lambda/requirements-analyst.zip
  #     Role: !GetAtt LambdaRole.Arn
  #     Timeout: 300
  #     MemorySize: 512
  #     Environment:
  #       Variables:
  #         LOG_LEVEL: INFO
  #         MEMORY_ID: !Ref AgentCoreMemoryId
  #         DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
  #         S3_BUCKET_NAME: !Ref ArtifactsBucketName
  #     Layers:
  #       - !Ref LambdaLayerArn
  #     TracingConfig:
  #       Mode: Active
  #     Tags:
  #       - Key: Application
  #         Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
                  
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-requirements-analyst-${Environment}"
      Description: Requirements Analyst agent - extracts and validates requirements from user requests
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Business Analyst and Requirements Engineer specializing in AI agent development. Transform natural language requests into comprehensive, structured requirements for production-ready AI agents.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            BasePromptTemplate: |
                {
                  "schemaVersion": "messages-v1",
                  "system": [
                    {
                      "text": "You are a Senior Business Analyst and Requirements Engineer with 15+ years of experience in AI system design. Your expertise spans enterprise software requirements, user experience design, and technical feasibility analysis.\n\n## YOUR ROLE\n\nAnalyze user requests and extract comprehensive requirements for building Bedrock Agents. Consider business context, technical feasibility, security, compliance, and operational needs.\n\n## CRITICAL INSTRUCTIONS\n\n1. Return ONLY valid JSON - no conversational text, no questions, no explanations\n2. NEVER ask clarifying questions - make reasonable assumptions\n3. Use fallback values for any missing information\n4. Analyze the request and output the complete JSON structure immediately\n5. If the request is vague, infer intent and provide sensible defaults\n\n## OUTPUT FORMAT\n\nMake sure your final response is a valid JSON schema follow the below Response Schema:\n\n##Response Schema:\n```json\n{\n  \"executive_summary\": {\n    \"agent_name\": \"string\",\n    \"purpose\": \"string\",\n    \"business_value\": \"string\",\n    \"complexity_level\": \"low|medium|high\",\n    \"estimated_effort\": \"string\"\n  },\n  \"for_solution_architect\": {\n    \"performance_requirements\": {\n      \"response_time_ms\": \"number\",\n      \"throughput_rpm\": \"number\",\n      \"availability_percent\": \"number\",\n      \"scalability_needs\": \"string\"\n    },\n    \"integration_requirements\": {\n      \"external_apis\": [\"string\"],\n      \"data_sources\": [\"string\"],\n      \"aws_services\": [\"string\"],\n      \"networking\": \"string\"\n    }\n  },\n  \"for_code_generator\": {\n    \"functional_specifications\": {\n      \"core_capabilities\": [\"string\"],\n      \"user_interaction_patterns\": [\"string\"],\n      \"input_validation\": [\"string\"],\n      \"output_formats\": [\"string\"],\n      \"error_scenarios\": [\"string\"]\n    },\n    \"business_logic\": {\n      \"decision_rules\": [\"string\"],\n      \"calculations\": [\"string\"],\n      \"workflows\": [\"string\"],\n      \"data_transformations\": [\"string\"]\n    },\n    \"agent_personality\": {\n      \"tone\": \"string\",\n      \"expertise_level\": \"string\",\n      \"conversation_style\": \"string\",\n      \"response_patterns\": [\"string\"]\n    }\n  },\n  \"for_quality_validator\": {\n    \"security_requirements\": {\n      \"authentication_method\": \"string\",\n      \"authorization_rules\": \"string\",\n      \"data_protection\": \"string\",\n      \"input_sanitization\": \"string\"\n    },\n    \"compliance_framework\": {\n      \"regulations\": [\"string\"],\n      \"industry_standards\": [\"string\"],\n      \"data_classification\": \"string\"\n    },\n    \"quality_gates\": {\n      \"performance_benchmarks\": [\"string\"],\n      \"reliability_targets\": \"string\",\n      \"security_controls\": [\"string\"]\n    }\n  },\n  \"for_deployment_manager\": {\n    \"infrastructure_specifications\": {\n      \"compute_requirements\": {\n        \"lambda_memory_mb\": \"number\",\n        \"lambda_timeout_seconds\": \"number\",\n        \"concurrent_executions\": \"number\"\n      },\n      \"storage_requirements\": {\n        \"s3_buckets\": [\"string\"],\n        \"dynamodb_tables\": [\"string\"]\n      },\n      \"networking_requirements\": {\n        \"vpc_needed\": \"boolean\",\n        \"internet_access\": \"string\"\n      }\n    },\n    \"operational_requirements\": {\n      \"monitoring_needs\": [\"string\"],\n      \"logging_requirements\": \"string\",\n      \"backup_strategy\": \"string\"\n    }\n  },\n  \"validation_criteria\": {\n    \"success_metrics\": [\"string\"],\n    \"acceptance_tests\": [\"string\"],\n    \"performance_tests\": [\"string\"]\n  }\n}\n```\n\n$prompt_session_attributes$"
                    }
                  ],
                  "messages": [
                    {
                      "role": "user",
                      "content": [
                        {
                          "text": "$question$"
                        }
                      ]
                    }
                  ],
                  "inferenceConfig": {
                    "temperature": 0,
                    "maxTokens": 16000,
                    "stopSequences": []
                  },
                  "additionalModelRequestFields": {
                    "inferenceConfig": {
                      "outputSchema": {
                        "type": "object",
                        "properties": {
                          "executive_summary": {
                            "type": "object",
                            "properties": {
                              "agent_name": { "type": "string" },
                              "purpose": { "type": "string" },
                              "business_value": { "type": "string" },
                              "complexity_level": {
                                "type": "string",
                                "enum": ["low", "medium", "high"]
                              },
                              "estimated_effort": { "type": "string" }
                            },
                            "required": [
                              "agent_name",
                              "purpose",
                              "business_value",
                              "complexity_level",
                              "estimated_effort"
                            ]
                          },
                          "for_solution_architect": {
                            "type": "object",
                            "properties": {
                              "performance_requirements": { "type": "object" },
                              "integration_requirements": { "type": "object" }
                            }
                          },
                          "for_code_generator": {
                            "type": "object",
                            "properties": {
                              "functional_specifications": { "type": "object" },
                              "business_logic": { "type": "object" },
                              "agent_personality": { "type": "object" }
                            }
                          },
                          "for_quality_validator": {
                            "type": "object",
                            "properties": {
                              "security_requirements": { "type": "object" },
                              "compliance_framework": { "type": "object" },
                              "quality_gates": { "type": "object" }
                            }
                          },
                          "for_deployment_manager": {
                            "type": "object",
                            "properties": {
                              "infrastructure_specifications": { "type": "object" },
                              "operational_requirements": { "type": "object" }
                            }
                          },
                          "validation_criteria": {
                            "type": "object",
                            "properties": {
                              "success_metrics": { "type": "array" },
                              "acceptance_tests": { "type": "array" },
                              "performance_tests": { "type": "array" }
                            }
                          }
                        },
                        "required": [
                          "executive_summary",
                          "for_solution_architect",
                          "for_code_generator",
                          "for_quality_validator",
                          "for_deployment_manager",
                          "validation_criteria"
                        ]
                      }
                    }
                  }
                }
            InferenceConfiguration:
              Temperature: 0.1
              StopSequences: []
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaFunction
  #     Action: lambda:InvokeFunction
  #     Principal: bedrock.amazonaws.com
  #     SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Requirements Analyst agent

Outputs:
  AgentId:
    Description: Requirements Analyst Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Requirements Analyst Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Requirements Analyst Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  # LambdaFunctionArn:
  #   Description: Requirements Analyst Lambda Function ARN
  #   Value: !GetAtt LambdaFunction.Arn
  #   Export:
  #     Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
