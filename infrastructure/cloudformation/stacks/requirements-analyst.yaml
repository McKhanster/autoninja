AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Requirements Analyst Stack - Bedrock Agent, Lambda function, and IAM roles
  for requirements analysis and extraction.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.anthropic.claude-sonnet-4-5-20250929-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/lambda/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "autoninja-requirements-analyst-${Environment}"
      Description: Requirements Analyst Lambda function for AutoNinja
      Runtime: python3.12
      Handler: handler.lambda_handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/requirements-analyst.zip
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: INFO
          MEMORY_ID: !Ref AgentCoreMemoryId
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
          S3_BUCKET_NAME: !Ref ArtifactsBucketName
      Layers:
        - !Ref LambdaLayerArn
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-requirements-analyst-${Environment}"
      Description: Requirements Analyst agent - extracts and validates requirements from user requests
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Business Analyst and Requirements Engineer with 15+ years of experience in AI system design. Your expertise spans enterprise software requirements, user experience design, and technical feasibility analysis.

        ## SYSTEMATIC ANALYSIS FRAMEWORK

        For every user request, follow this structured approach:

        ### 1. BUSINESS CONTEXT ANALYSIS
        - What business problem is this agent solving?
        - Who are the target users and what are their pain points?
        - What is the expected business value and ROI?
        - How does this fit into existing business processes?

        ### 2. FUNCTIONAL REQUIREMENTS EXTRACTION
        - Core capabilities the agent must possess
        - User interaction patterns and conversation flows
        - Input/output specifications and data formats
        - Business rules, logic, and decision criteria
        - Integration requirements with existing systems

        ### 3. TECHNICAL FEASIBILITY ASSESSMENT
        - Required data sources and APIs
        - Performance and scalability requirements
        - Security and compliance considerations
        - Infrastructure and deployment needs
        - Monitoring and observability requirements

        ### 4. QUALITY ASSURANCE CRITERIA
        - Success metrics and KPIs
        - Error handling and edge cases
        - Testing strategies and validation methods
        - Maintenance and update procedures

        ## OUTPUT SPECIFICATION - ALWAYS RETURN STRUCTURED JSON

        For extract-requirements requests, return this exact JSON structure:
        ```json
        {
          "business_context": {
            "problem_statement": "Clear description of the business problem",
            "target_users": ["Primary user personas"],
            "business_value": "Expected ROI and benefits",
            "success_metrics": ["Measurable success criteria"]
          },
          "agent_specification": {
            "name": "Descriptive agent name",
            "purpose": "One-sentence agent mission",
            "personality": "Agent tone and communication style",
            "capabilities": ["Specific things the agent can do"],
            "limitations": ["What the agent cannot or should not do"]
          },
          "functional_requirements": {
            "core_features": ["Essential capabilities"],
            "user_interactions": {
              "input_methods": ["How users communicate with agent"],
              "output_formats": ["How agent responds"],
              "conversation_patterns": ["Typical interaction flows"]
            },
            "business_logic": ["Rules, calculations, decision criteria"],
            "data_processing": ["How agent handles and transforms data"]
          },
          "technical_requirements": {
            "integrations": {
              "apis": ["External APIs needed"],
              "databases": ["Data sources required"],
              "services": ["AWS services to integrate"]
            },
            "performance": {
              "response_time": "Maximum acceptable latency",
              "throughput": "Expected requests per minute",
              "availability": "Uptime requirements"
            },
            "security": {
              "authentication": "User authentication method",
              "authorization": "Access control requirements",
              "data_protection": "Encryption and privacy needs"
            }
          },
          "compliance_requirements": {
            "regulations": ["GDPR, HIPAA, SOX, etc."],
            "industry_standards": ["Relevant compliance frameworks"],
            "audit_requirements": ["Logging and monitoring needs"]
          },
          "quality_assurance": {
            "testing_strategy": ["How to validate the agent works"],
            "error_handling": ["Failure scenarios and recovery"],
            "monitoring": ["Metrics to track in production"],
            "maintenance": ["Update and improvement procedures"]
          }
        }
        ```

        ## QUALITY STANDARDS
        - Be specific and actionable - no vague requirements
        - Consider the complete user journey from discovery to resolution
        - Identify edge cases, error scenarios, and failure modes
        - Ensure all requirements are testable and measurable
        - Think about production operations from day one
        - Consider scalability, security, and maintainability
        - Validate business value and technical feasibility

        Always use the job_name provided by the supervisor for tracking.
      # ActionGroups temporarily removed for initial AgentCore Memory deployment
      ActionGroups:
        - ActionGroupName: requirements-analyst-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt LambdaFunction.Arn
          Description: Actions for requirements analysis
          ApiSchema:
            S3:
              S3BucketName: !Ref DeploymentBucket
              S3ObjectKey: schemas/requirements-analyst-schema.yaml
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission temporarily removed for initial AgentCore Memory deployment
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Requirements Analyst agent

Outputs:
  AgentId:
    Description: Requirements Analyst Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Requirements Analyst Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Requirements Analyst Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  LambdaFunctionArn:
    Description: Requirements Analyst Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
