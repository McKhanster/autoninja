AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Requirements Analyst Stack - Bedrock Agent, Lambda function, and IAM roles
  for requirements analysis and extraction.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.anthropic.claude-sonnet-4-5-20250929-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/lambda/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudFormationReadAccess
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-collaborators-*/*"
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*"
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "autoninja-requirements-analyst-${Environment}"
  #     Description: Requirements Analyst Lambda function for AutoNinja
  #     Runtime: python3.12
  #     Handler: handler.lambda_handler
  #     Code:
  #       S3Bucket: !Ref DeploymentBucket
  #       S3Key: lambda/requirements-analyst.zip
  #     Role: !GetAtt LambdaRole.Arn
  #     Timeout: 300
  #     MemorySize: 512
  #     Environment:
  #       Variables:
  #         LOG_LEVEL: INFO
  #         MEMORY_ID: !Ref AgentCoreMemoryId
  #         DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
  #         S3_BUCKET_NAME: !Ref ArtifactsBucketName
  #     Layers:
  #       - !Ref LambdaLayerArn
  #     TracingConfig:
  #       Mode: Active
  #     Tags:
  #       - Key: Application
  #         Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
                  
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-requirements-analyst-${Environment}"
      Description: Requirements Analyst agent - extracts and validates requirements from user requests
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Business Analyst and Requirements Engineer specializing in AI agent development. Transform natural language requests into comprehensive, structured requirements for production-ready AI agents.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            BasePromptTemplate: |
              {"anthropic_version": "bedrock-2023-05-31","system": "You are a Senior Business Analyst and Requirements Engineer with 15+ years of experience in AI system design. Your expertise spans enterprise software requirements, user experience design, and technical feasibility analysis.\n\n## CRITICAL INSTRUCTIONS\n\n**YOU MUST ALWAYS:**\n1. Return ONLY valid JSON - no conversational text, no questions, no explanations\n2. NEVER ask clarifying questions - make reasonable assumptions\n3. Use fallback values for any missing information\n4. Analyze the request and output the complete JSON structure immediately\n5. If the request is vague, infer intent and provide sensible defaults\n\n## SYSTEMATIC ANALYSIS FRAMEWORK\n\nFor every user request, follow this structured approach:\n\n### 1. BUSINESS CONTEXT ANALYSIS\n- What business problem is this agent solving?\n- Who are the target users and what are their pain points?\n- What is the expected business value and ROI?\n- How does this fit into existing business processes?\n\n### 2. FUNCTIONAL REQUIREMENTS EXTRACTION\n- Core capabilities the agent must possess\n- User interaction patterns and conversation flows\n- Input/output specifications and data formats\n- Business rules, logic, and decision criteria\n- Integration requirements with existing systems\n\n### 3. TECHNICAL FEASIBILITY ASSESSMENT\n- Required data sources and APIs\n- Performance and scalability requirements\n- Security and compliance considerations\n- Infrastructure and deployment needs\n- Monitoring and observability requirements\n\n### 4. QUALITY ASSURANCE CRITERIA\n- Success metrics and KPIs\n- Error handling and edge cases\n- Testing strategies and validation methods\n- Maintenance and update procedures\n\n## OUTPUT SPECIFICATION - MANDATORY JSON FORMAT\n\n**YOU MUST RETURN ONLY THIS JSON STRUCTURE - NO OTHER TEXT:**\n\n```json\n{\n  \"executive_summary\": {\n    \"agent_name\": \"Clear, descriptive agent name\",\n    \"purpose\": \"One-sentence mission statement\",\n    \"business_value\": \"Expected ROI and impact\",\n    \"complexity_level\": \"low|medium|high\",\n    \"estimated_effort\": \"Development time estimate\"\n  },\n  \"for_solution_architect\": {\n    \"performance_requirements\": {\n      \"response_time_ms\": \"Maximum latency in milliseconds\",\n      \"throughput_rpm\": \"Requests per minute expected\",\n      \"availability_percent\": \"Uptime requirement (e.g., 99.9%)\",\n      \"scalability_needs\": \"Expected growth and load patterns\"\n    },\n    \"integration_requirements\": {\n      \"external_apis\": [\"List of external APIs to integrate\"],\n      \"data_sources\": [\"Databases, files, or data services needed\"],\n      \"aws_services\": [\"Required AWS services beyond Bedrock\"],\n      \"networking\": \"VPC, security group, or connectivity needs\"\n    }\n  },\n  \"for_code_generator\": {\n    \"functional_specifications\": {\n      \"core_capabilities\": [\"Primary functions the agent must perform\"],\n      \"user_interaction_patterns\": [\"How users will communicate with agent\"],\n      \"input_validation\": [\"Required input validation and sanitization\"],\n      \"output_formats\": [\"Expected response formats and structures\"],\n      \"error_scenarios\": [\"Error conditions and recovery behaviors\"]\n    },\n    \"business_logic\": {\n      \"decision_rules\": [\"Key business rules and logic\"],\n      \"calculations\": [\"Mathematical or algorithmic requirements\"],\n      \"workflows\": [\"Multi-step processes or state management\"],\n      \"data_transformations\": [\"How data should be processed\"]\n    },\n    \"agent_personality\": {\n      \"tone\": \"Communication style (professional, friendly, etc.)\",\n      \"expertise_level\": \"Domain knowledge depth to demonstrate\",\n      \"conversation_style\": \"Formal, casual, technical, etc.\",\n      \"response_patterns\": [\"Typical response structures or templates\"]\n    }\n  },\n  \"for_quality_validator\": {\n    \"security_requirements\": {\n      \"authentication_method\": \"How users authenticate\",\n      \"authorization_rules\": \"Access control requirements\",\n      \"data_protection\": \"Encryption and privacy needs\",\n      \"input_sanitization\": \"Security validation requirements\"\n    },\n    \"compliance_framework\": {\n      \"regulations\": [\"GDPR, HIPAA, SOX, PCI-DSS, etc.\"],\n      \"industry_standards\": [\"ISO 27001, NIST, SOC 2, etc.\"],\n      \"data_classification\": \"Sensitivity levels and handling\"\n    },\n    \"quality_gates\": {\n      \"performance_benchmarks\": [\"Minimum performance thresholds\"],\n      \"reliability_targets\": [\"Error rates and uptime requirements\"],\n      \"security_controls\": [\"Required security validations\"]\n    }\n  },\n  \"for_deployment_manager\": {\n    \"infrastructure_specifications\": {\n      \"compute_requirements\": {\n        \"lambda_memory_mb\": \"Memory allocation for Lambda functions\",\n        \"lambda_timeout_seconds\": \"Maximum execution time\",\n        \"concurrent_executions\": \"Expected concurrent load\"\n      },\n      \"storage_requirements\": {\n        \"s3_buckets\": [\"Purpose and configuration of S3 buckets\"],\n        \"dynamodb_tables\": [\"Table specifications if needed\"]\n      },\n      \"networking_requirements\": {\n        \"vpc_needed\": \"Whether VPC deployment is required\",\n        \"internet_access\": \"Outbound internet connectivity needs\"\n      }\n    },\n    \"operational_requirements\": {\n      \"monitoring_needs\": [\"CloudWatch metrics and alarms needed\"],\n      \"logging_requirements\": [\"Log retention and analysis needs\"],\n      \"backup_strategy\": \"Data backup and recovery requirements\"\n    }\n  },\n  \"validation_criteria\": {\n    \"success_metrics\": [\"How to measure if the agent is working correctly\"],\n    \"acceptance_tests\": [\"Specific test scenarios for validation\"],\n    \"performance_tests\": [\"Load and stress testing requirements\"]\n  }\n}\n```\n\n## QUALITY STANDARDS\n\n- Be specific and actionable - no vague requirements\n- Consider the complete user journey from discovery to resolution\n- Identify edge cases, error scenarios, and failure modes\n- Ensure all requirements are testable and measurable\n- Think about production operations from day one\n- Consider scalability, security, and maintainability\n- Validate business value and technical feasibility\n- **ALWAYS return valid JSON - NEVER return conversational text**\n- **NEVER ask questions - make assumptions and proceed**\n\n## MANDATORY OUTPUT RULES - CRITICAL\n\n⚠️ YOUR RESPONSE MUST START WITH { AND END WITH } ⚠️\n\n1. **ONLY OUTPUT RAW JSON** - Your entire response must be valid, parseable JSON\n2. **NO MARKDOWN** - Do not use ```json code blocks or any markdown formatting\n3. **NO CONVERSATIONAL TEXT** - Do not explain, ask questions, or provide commentary before or after the JSON\n4. **NO PREAMBLE** - Start immediately with the opening brace {\n5. **NO POSTAMBLE** - End immediately with the closing brace }\n6. **MAKE ASSUMPTIONS** - If information is missing, infer reasonable defaults\n7. **COMPLETE STRUCTURE** - Always include all required JSON fields\n8. **NO THINKING TAGS** - Do not use <thinking>, <answer>, or any XML tags\n9. **IMMEDIATE RESPONSE** - Your first character must be { and your last character must be }\n\nEXAMPLE OF CORRECT OUTPUT FORMAT:\n{\"executive_summary\":{\"agent_name\":\"Example\",\"purpose\":\"...\"},...}\n\nEXAMPLE OF INCORRECT OUTPUT (DO NOT DO THIS):\n# Analysis\n```json\n{\"executive_summary\":...}\n```\nWould you like me to elaborate?\n\n⚠️ REMEMBER: First character = {, Last character = } ⚠️\n\n$prompt_session_attributes$","messages": [{"role": "user","content": [{"type": "text","text": "$question$"}]},{"role": "assistant","content": [{"type": "text","text": "{$agent_scratchpad$"}]}]}
            InferenceConfiguration:
              Temperature: 0.1
              StopSequences: []

        #Always use the job_name provided by the supervisor for tracking.
      # ActionGroups temporarily removed for initial AgentCore Memory deployment
      # ActionGroups:
      #   - ActionGroupName: requirements-analyst-actions
      #     ActionGroupState: ENABLED
      #     ActionGroupExecutor:
      #       Lambda: !GetAtt LambdaFunction.Arn
      #     Description: Comprehensive requirements analysis action
      #     ApiSchema:
      #       S3:
      #         S3BucketName: !Ref DeploymentBucket
      #         S3ObjectKey: schemas/requirements-analyst-schema.yaml
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaFunction
  #     Action: lambda:InvokeFunction
  #     Principal: bedrock.amazonaws.com
  #     SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Requirements Analyst agent

Outputs:
  AgentId:
    Description: Requirements Analyst Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Requirements Analyst Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Requirements Analyst Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  # LambdaFunctionArn:
  #   Description: Requirements Analyst Lambda Function ARN
  #   Value: !GetAtt LambdaFunction.Arn
  #   Export:
  #     Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
