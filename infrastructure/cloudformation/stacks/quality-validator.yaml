AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Quality Validator Stack - Bedrock Agent, Lambda function, and IAM roles
  for code validation.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.amazon.nova-premier-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

  InferenceProfileModelId:
    Type: String
    Description: Inference profile model ID for cross-region access
    Default: "us.amazon.nova-premier-v1:0"

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudFormationReadAccess
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-collaborators-*/*"
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*"
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "autoninja-quality-validator-${Environment}"
  #     Description: Quality Validator Lambda function for AutoNinja
  #     Runtime: python3.12
  #     Handler: handler.lambda_handler
  #     Code:
  #       S3Bucket: !Ref DeploymentBucket
  #       S3Key: lambda/quality-validator.zip
  #     Role: !GetAtt LambdaRole.Arn
  #     Timeout: 300
  #     MemorySize: 512
  #     Environment:
  #       Variables:
  #         LOG_LEVEL: INFO
  #         MEMORY_ID: !Ref AgentCoreMemoryId
  #         DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
  #         S3_BUCKET_NAME: !Ref ArtifactsBucketName
  #     Layers:
  #       - !Ref LambdaLayerArn
  #     TracingConfig:
  #       Mode: Active
  #     Tags:
  #       - Key: Application
  #         Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-quality-validator-${Environment}"
      Description: Quality Validator agent - validates code quality, security, and compliance
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Security Engineer and Code Quality Expert specializing in AWS security, compliance, and quality assurance.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            InferenceConfiguration:
              Temperature: 0.0
              StopSequences: []
            BasePromptTemplate: |
              {
                "schemaVersion": "messages-v1",
                "system": [
                  {
                    "text": "You are a Senior Security Engineer and Code Quality Expert specializing in enterprise software security, compliance, and quality assurance.\n\n## YOUR ROLE\n\nEvaluate requirements, architecture, or code for security vulnerabilities (OWASP Top 10), code quality, compliance with regulations (GDPR, HIPAA, SOX, PCI DSS), AWS security best practices, performance issues, and error handling.\n\n## VALIDATION TYPES\n\nYou will receive input with a 'type' field:\n1. **requirements** - Validate requirements completeness and feasibility\n2. **architecture** - Validate architecture design and AWS service selection\n3. **code** - Validate code security, quality, and compliance\n\n## QUALITY GATE CRITERIA\n\n**APPROVE (is_valid: true, score >= 60):**\n- No critical security vulnerabilities\n- Core compliance requirements met\n- Basic error handling present\n- Minimum security controls implemented\n\n**REJECT (is_valid: false, score < 60):**\n- Critical security vulnerabilities without mitigation\n- Major compliance violations\n- Missing security controls\n- No error handling or logging\n\n## OUTPUT FORMAT\n\nMake sure your final response is a valid JSON schema follow the below Response Schema:\n\n##Response Schema:\n```json\n{\n  \"is_valid\": true/false,\n  \"validation_type\": \"requirements|architecture|code\",\n  \"score\": 0-100,\n  \"issues\": [\n    {\n      \"severity\": \"low|medium|high|critical\",\n      \"category\": \"Security|Quality|Compliance|Performance\",\n      \"description\": \"string\",\n      \"recommendation\": \"string\"\n    }\n  ],\n  \"recommendations\": [\"string\"],\n  \"deployment_recommendation\": \"APPROVE|CONDITIONAL|REJECT\"\n}\n```\n\n$prompt_session_attributes$"
                  }
                ],
                "messages": [
                  {
                    "role": "user",
                    "content": [
                      {
                        "text": "$question$"
                      }
                    ]
                  }
                ],
                "inferenceConfig": {
                  "temperature": 0,
                  "maxTokens": 32000,
                  "topP": 0.9,
                  "stopSequences": []
                },
                "additionalModelRequestFields": {
                  "inferenceConfig": {
                    "outputSchema": {
                      "type": "object",
                      "properties": {
                        "is_valid": {
                          "type": "boolean",
                          "description": "Whether the validation passed"
                        },
                        "validation_type": {
                          "type": "string",
                          "enum": ["requirements", "architecture", "code"],
                          "description": "Type of validation performed"
                        },
                        "score": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "description": "Quality score from 0-100"
                        },
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "severity": {
                                "type": "string",
                                "enum": ["low", "medium", "high", "critical"]
                              },
                              "category": {
                                "type": "string",
                                "enum": ["Security", "Quality", "Compliance", "Performance"]
                              },
                              "description": {"type": "string"},
                              "recommendation": {"type": "string"}
                            },
                            "required": ["severity", "category", "description", "recommendation"]
                          }
                        },
                        "recommendations": {
                          "type": "array",
                          "items": {"type": "string"},
                          "description": "General improvement suggestions"
                        },
                        "deployment_recommendation": {
                          "type": "string",
                          "enum": ["APPROVE", "CONDITIONAL", "REJECT"],
                          "description": "Final deployment recommendation"
                        }
                      },
                      "required": ["is_valid", "validation_type", "score", "issues", "recommendations", "deployment_recommendation"]
                    }
                  }
                }
              }
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaFunction
  #     Action: lambda:InvokeFunction
  #     Principal: bedrock.amazonaws.com
  #     SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Quality Validator agent

Outputs:
  AgentId:
    Description: Quality Validator Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Quality Validator Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Quality Validator Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  # LambdaFunctionArn:
  #   Description: Quality Validator Lambda Function ARN
  #   Value: !GetAtt LambdaFunction.Arn
  #   Export:
  #     Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
