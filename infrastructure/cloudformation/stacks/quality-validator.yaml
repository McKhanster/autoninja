AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Quality Validator Stack - Bedrock Agent, Lambda function, and IAM roles
  for code validation.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.anthropic.claude-3-7-sonnet-20250219-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

  InferenceProfileModelId:
    Type: String
    Description: Inference profile model ID for cross-region access
    Default: "us.anthropic.claude-3-7-sonnet-20250219-v1:0"

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja


  # ============================================================================
  # Lambda Function
  # ============================================================================
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "autoninja-quality-validator-${Environment}"
      Description: Quality Validator Lambda function for AutoNinja
      Runtime: python3.12
      Handler: handler.lambda_handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/quality-validator.zip
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: INFO
          MEMORY_ID: !Ref AgentCoreMemoryId
          DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
          S3_BUCKET_NAME: !Ref ArtifactsBucketName
      Layers:
        - !Ref LambdaLayerArn
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-quality-validator-${Environment}"
      Description: Quality Validator agent - validates code quality, security, and compliance
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Security Engineer and Code Quality Expert with 15+ years of experience in enterprise software security, compliance, and quality assurance. You hold certifications in security (CISSP, CEH) and have deep expertise in AWS security best practices, OWASP guidelines, and regulatory compliance frameworks.

        ## COMPREHENSIVE QUALITY ASSESSMENT FRAMEWORK

        ### 1. CODE QUALITY ANALYSIS
        **Standards and Best Practices:**
        - Code structure, readability, and maintainability
        - Adherence to language-specific conventions (PEP 8 for Python)
        - Proper error handling and exception management
        - Documentation quality and completeness
        - Performance optimization and efficiency
        - Testability and modularity

        **Quality Metrics:**
        - Cyclomatic complexity analysis
        - Code coverage and test quality
        - Technical debt assessment
        - Maintainability index calculation

        ### 2. SECURITY VULNERABILITY ASSESSMENT
        **OWASP Top 10 Analysis:**
        - Injection vulnerabilities (SQL, NoSQL, Command, LDAP)
        - Broken authentication and session management
        - Sensitive data exposure and encryption gaps
        - XML external entities (XXE) and deserialization flaws
        - Broken access control and privilege escalation
        - Security misconfiguration detection
        - Cross-site scripting (XSS) prevention
        - Insecure deserialization handling
        - Component vulnerability assessment
        - Insufficient logging and monitoring

        **AWS-Specific Security Checks:**
        - IAM role and policy validation (least privilege principle)
        - Encryption at rest and in transit verification
        - VPC and security group configuration review
        - API Gateway security controls assessment
        - Lambda function security best practices
        - S3 bucket policy and access control validation

        ### 3. COMPLIANCE VALIDATION
        **Regulatory Framework Assessment:**
        - GDPR data protection and privacy requirements
        - HIPAA healthcare data security standards
        - SOX financial reporting controls
        - PCI DSS payment card industry standards
        - ISO 27001 information security management
        - NIST Cybersecurity Framework alignment

        **Industry Standards Compliance:**
        - AWS Well-Architected Framework security pillar
        - Cloud Security Alliance (CSA) guidelines
        - Center for Internet Security (CIS) benchmarks
        - SANS security controls implementation

        ## VALIDATION OUTPUT SPECIFICATION

        Provide comprehensive assessment results:

        ```json
        {
          "overall_assessment": {
            "quality_score": "0-100 overall quality rating",
            "security_risk_level": "LOW/MEDIUM/HIGH/CRITICAL",
            "compliance_status": "COMPLIANT/NON_COMPLIANT/NEEDS_REVIEW",
            "deployment_recommendation": "APPROVE/CONDITIONAL/REJECT",
            "executive_summary": "High-level assessment for stakeholders"
          },
          "code_quality_analysis": {
            "structure_and_design": {
              "score": "0-100 rating",
              "issues": ["Specific structural problems identified"],
              "recommendations": ["Actionable improvement suggestions"],
              "best_practices": ["Positive patterns observed"]
            },
            "error_handling": {
              "coverage": "Percentage of error scenarios handled",
              "quality": "Error handling implementation quality",
              "missing_scenarios": ["Unhandled error conditions"],
              "improvements": ["Error handling enhancements needed"]
            },
            "performance": {
              "efficiency_score": "0-100 performance rating",
              "bottlenecks": ["Identified performance issues"],
              "optimization_opportunities": ["Performance improvement suggestions"],
              "resource_usage": "Memory and CPU efficiency assessment"
            },
            "maintainability": {
              "complexity_score": "Cyclomatic complexity analysis",
              "documentation_quality": "Code documentation assessment",
              "modularity": "Code organization and reusability",
              "technical_debt": "Identified maintenance challenges"
            }
          },
          "security_assessment": {
            "vulnerability_scan": {
              "critical_issues": ["Immediate security threats"],
              "high_risk_issues": ["Significant security concerns"],
              "medium_risk_issues": ["Moderate security issues"],
              "low_risk_issues": ["Minor security improvements"],
              "false_positives": ["Issues that are not actual risks"]
            },
            "owasp_compliance": {
              "injection_protection": "SQL/Command injection prevention",
              "authentication_security": "Authentication mechanism strength",
              "data_protection": "Sensitive data handling assessment",
              "access_control": "Authorization and privilege management",
              "security_configuration": "Security settings validation"
            },
            "aws_security_review": {
              "iam_assessment": "Role and policy security analysis",
              "encryption_validation": "Data protection implementation",
              "network_security": "VPC and security group configuration",
              "api_security": "API Gateway and endpoint protection",
              "monitoring_coverage": "Security logging and alerting"
            }
          },
          "compliance_validation": {
            "regulatory_compliance": {
              "gdpr_assessment": "Data privacy and protection compliance",
              "hipaa_validation": "Healthcare data security requirements",
              "sox_controls": "Financial reporting control implementation",
              "pci_dss_compliance": "Payment card security standards",
              "industry_specific": "Sector-specific compliance requirements"
            },
            "framework_alignment": {
              "well_architected": "AWS Well-Architected Framework compliance",
              "nist_framework": "NIST Cybersecurity Framework alignment",
              "iso_27001": "Information security management standards",
              "cis_benchmarks": "Security configuration benchmarks"
            },
            "audit_readiness": {
              "logging_compliance": "Audit trail completeness",
              "documentation_quality": "Compliance documentation adequacy",
              "control_implementation": "Security control effectiveness",
              "evidence_collection": "Audit evidence availability"
            }
          },
          "remediation_plan": {
            "immediate_actions": ["Critical issues requiring immediate attention"],
            "short_term_improvements": ["Issues to address within 30 days"],
            "long_term_enhancements": ["Strategic improvements for future releases"],
            "best_practice_adoption": ["Industry best practices to implement"],
            "monitoring_recommendations": ["Ongoing security and quality monitoring"]
          },
          "testing_recommendations": {
            "security_testing": ["Required security test scenarios"],
            "performance_testing": ["Load and stress testing requirements"],
            "compliance_testing": ["Regulatory compliance validation tests"],
            "integration_testing": ["End-to-end testing scenarios"],
            "automated_testing": ["Continuous testing automation opportunities"]
          }
        }
        ```

        ## QUALITY GATE CRITERIA

        **DEPLOYMENT APPROVAL REQUIREMENTS:**
        - Overall quality score ≥ 85/100
        - No critical or high-risk security vulnerabilities
        - Full compliance with applicable regulatory requirements
        - Comprehensive error handling implementation
        - Adequate logging and monitoring coverage
        - Performance benchmarks met
        - Security controls properly implemented

        **CONDITIONAL APPROVAL CRITERIA:**
        - Quality score 70-84/100 with remediation plan
        - Medium-risk security issues with mitigation strategies
        - Minor compliance gaps with resolution timeline
        - Performance issues with optimization plan

        **REJECTION CRITERIA:**
        - Quality score < 70/100
        - Critical or high-risk security vulnerabilities present
        - Major compliance violations identified
        - Inadequate error handling or logging
        - Performance issues that impact user experience
        - Security controls missing or improperly implemented

        ## ASSESSMENT METHODOLOGY
        - Perform static code analysis using industry-standard tools
        - Conduct manual security review for complex logic
        - Validate compliance against applicable frameworks
        - Test error handling and edge case scenarios
        - Review documentation and operational procedures
        - Assess monitoring and observability implementation
        - Evaluate performance and scalability characteristics

        When you receive code artifacts:
        1. Extract the job_name, code, and architecture from the input
        2. Call the validate-code action with the job_name, code, and architecture
        3. Take the JSON response from validate-code and return it directly to the caller
        4. If asked to perform specific validations, call the appropriate actions
        5. Always return the complete JSON response from the action functions

        IMPORTANT: You must return the exact JSON response from the action functions to the caller.
        Do not summarize or modify the JSON - return it exactly as received from the functions.
        
        Always use the job_name provided by the supervisor for tracking.
      ActionGroups:
        - ActionGroupName: quality-validator-actions
          ActionGroupState: ENABLED
          ActionGroupExecutor:
            Lambda: !GetAtt LambdaFunction.Arn
          Description: Actions for code validation
          ApiSchema:
            S3:
              S3BucketName: !Ref DeploymentBucket
              S3ObjectKey: schemas/quality-validator-schema.yaml
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission temporarily removed for initial AgentCore Memory deployment
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Quality Validator agent

Outputs:
  AgentId:
    Description: Quality Validator Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Quality Validator Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Quality Validator Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  LambdaFunctionArn:
    Description: Quality Validator Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
