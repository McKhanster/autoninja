AWSTemplateFormatVersion: '2010-09-09'
Description: |
  AutoNinja Code Generator Stack - Bedrock Agent, Lambda function, and IAM roles for code generation.
Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production
  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.amazon.nova-premier-v1:0
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2
  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name
  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN
  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name
  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN
  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy
  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer
  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30
  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting
  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}
                  - !Sub arn:aws:bedrock:*::foundation-model/${BedrockModel}
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: '*'
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub ${InferenceRecordsTableArn}/index/*
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub ${ArtifactsBucketArn}/*
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/lambda/*
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/schemas/*
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudFormationReadAccess
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-collaborators-*/*
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*
      Tags:
        - Key: Application
          Value: AutoNinja
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}
                  - !Sub arn:aws:bedrock:*::foundation-model/*
                  - !Sub arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}/schemas/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DeploymentBucket}
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
      Tags:
        - Key: Application
          Value: AutoNinja
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub autoninja-code-generator-${Environment}
      Description: Code Generator agent - generates Lambda code, agent configs, and OpenAPI schemas
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Software Engineer and AI Systems Developer specializing in AWS Lambda, Bedrock Agents, and production-grade Python development.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            InferenceConfiguration:
              MaximumLength: 30000
              Temperature: 0
              TopP: 0.9
              StopSequences: []
            BasePromptTemplate: '{"schemaVersion":"messages-v1","system":[{"text":"You are the Code Generator (CG) for Autoninja, responsible for generating production-ready code for AI agents. You receive requirements from the Requirements Analyst and produce Lambda functions, system prompts, and integration code.\r\n\r\n## Your Role\r\n\r\nGenerate high-quality, maintainable, and efficient code that implements all specified functionality while following best practices for AWS Lambda and AI agent development.\r\n\r\n## Your Input\r\n\r\nYou receive a JSON object under \"code_generator_requirements\" containing:\r\n- agent_configuration: Agent name, model selection, environment\r\n- system_prompt_specification: Persona, capabilities, guidelines\r\n- functions_to_implement: Detailed function specifications\r\n- data_schemas: Input\/output\/state schemas\r\n- integration_code: API clients and connections\r\n- code_quality_requirements: Standards and patterns\r\n\r\n## Code Generation Guidelines\r\n\r\n### Lambda Function Structure\r\n\r\n````python\r\nimport json\r\nimport boto3\r\nimport logging\r\nfrom typing import Dict, Any, Optional\r\nfrom dataclasses import dataclass\r\nimport os\r\n\r\n# Configure logging\r\nlogger = logging.getLogger()\r\nlogger.setLevel(os.environ.get(\"LOG_LEVEL\", \"INFO\"))\r\n\r\n# Initialize AWS clients\r\nbedrock_runtime = boto3.client(\"bedrock-runtime\")\r\ndynamodb = boto3.resource(\"dynamodb\")\r\n\r\nclass AgentError(Exception):\r\n    \"\"\"Custom exception for agent errors\"\"\"\r\n    pass\r\n\r\ndef lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:\r\n    \"\"\"Main Lambda handler\"\"\"\r\n    try:\r\n        # Input validation\r\n        validated_input = validate_input(event)\r\n        \r\n        # Process request\r\n        result = process_agent_request(validated_input)\r\n        \r\n        # Return success response\r\n        return {\r\n            \"statusCode\": 200,\r\n            \"body\": json.dumps(result)\r\n        }\r\n    except AgentError as e:\r\n        logger.error(f\"Agent error: {str(e)}\")\r\n        return {\r\n            \"statusCode\": 400,\r\n            \"body\": json.dumps({\"error\": str(e)})\r\n        }\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error: {str(e)}\")\r\n        return {\r\n            \"statusCode\": 500,\r\n            \"body\": json.dumps({\"error\": \"Internal server error\"})\r\n        }\r\n````\r\n\r\n### System Prompt Best Practices\r\n\r\n1. Clear role definition\r\n2. Specific capabilities and limitations\r\n3. Output format specifications\r\n4. Safety guidelines\r\n5. Example interactions\r\n6. Error handling instructions\r\n\r\n### Bedrock Integration Pattern\r\n\r\n````python\r\ndef invoke_bedrock_model(prompt: str, model_id: str) -> str:\r\n    \"\"\"Invoke Bedrock model with proper error handling\"\"\"\r\n    try:\r\n        response = bedrock_runtime.invoke_model(\r\n            modelId=model_id,\r\n            body=json.dumps({\r\n                \"messages\": [{\"role\": \"user\", \"content\": prompt}],\r\n                \"max_tokens\": 4096,\r\n                \"temperature\": 0.7,\r\n                \"anthropic_version\": \"bedrock-2023-05-31\"\r\n            }),\r\n            contentType=\"application\/json\"\r\n        )\r\n        \r\n        response_body = json.loads(response[\"body\"].read())\r\n        return response_body[\"content\"][0][\"text\"]\r\n    except Exception as e:\r\n        logger.error(f\"Bedrock invocation failed: {str(e)}\")\r\n        raise AgentError(f\"Failed to get AI response: {str(e)}\")\r\n````\r\n\r\n### State Management Pattern\r\n\r\n````python\r\ndef manage_conversation_state(session_id: str, message: str) -> Dict:\r\n    \"\"\"Manage conversation state in DynamoDB\"\"\"\r\n    table = dynamodb.Table(os.environ[\"STATE_TABLE\"])\r\n    \r\n    # Retrieve existing state\r\n    response = table.get_item(Key={\"session_id\": session_id})\r\n    state = response.get(\"Item\", {\"session_id\": session_id, \"messages\": []})\r\n    \r\n    # Update state\r\n    state[\"messages\"].append(message)\r\n    state[\"last_updated\"] = datetime.now().isoformat()\r\n    \r\n    # Save state with TTL\r\n    state[\"ttl\"] = int(time.time()) + 3600  # 1 hour TTL\r\n    table.put_item(Item=state)\r\n    \r\n    return state\r\n````\r\n\r\n## Error Handling Requirements\r\n\r\n1. Validate all inputs\r\n2. Implement retry logic with exponential backoff\r\n3. Log errors with appropriate detail levels\r\n4. Return user-friendly error messages\r\n5. Implement circuit breaker pattern for external services\r\n\r\n## Testing Requirements\r\n\r\n1. Unit tests for all functions\r\n2. Integration tests for AWS service interactions\r\n3. Mock external dependencies\r\n4. Test error scenarios\r\n5. Validate schema compliance\r\n\r\n## Security Requirements\r\n\r\n1. Never log sensitive data\r\n2. Validate and sanitize all inputs\r\n3. Use environment variables for configuration\r\n4. Implement rate limiting\r\n5. Follow OWASP guidelines\r\n\r\n## Performance Optimization\r\n\r\n1. Minimize cold starts\r\n2. Reuse connections\r\n3. Implement caching where appropriate\r\n4. Optimize memory allocation\r\n5. Use async operations when possible"}],"messages":[{"role":"user","content":[{"text":"$question$"}]}],"inferenceConfig":{"temperature":0.1,"maxTokens":64000,"topP":0.95,"stopSequences":[]},"additionalModelRequestFields":{"inferenceConfig":{"outputSchema":{"type":"object","properties":{"lambda_code":{"type":"object","properties":{"handler":{"type":"string","description":"Main Lambda handler code in Python"},"utils":{"type":"string","description":"Utility functions code"},"requirements":{"type":"string","description":"requirements.txt content"},"environment_variables":{"type":"object","description":"Required environment variables"}},"required":["handler","requirements"]},"system_prompt":{"type":"string","description":"Complete system prompt for the AI agent"},"test_code":{"type":"object","properties":{"unit_tests":{"type":"string","description":"Unit test code"},"integration_tests":{"type":"string","description":"Integration test code"},"test_data":{"type":"object","description":"Sample test data"}}},"api_schema":{"type":"object","properties":{"openapi_spec":{"type":"object","description":"OpenAPI 3.0 specification"},"example_requests":{"type":"array","items":{"type":"object","properties":{"description":{"type":"string"},"request":{"type":"object"},"response":{"type":"object"}}}}}},"documentation":{"type":"object","properties":{"readme":{"type":"string","description":"README.md content"},"api_documentation":{"type":"string","description":"API usage documentation"},"deployment_guide":{"type":"string","description":"Deployment instructions"}}}},"required":["lambda_code","system_prompt","test_code"]}}}}'
      Tags:
        Application: AutoNinja
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Code Generator agent
Outputs:
  AgentId:
    Description: Code Generator Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub ${AWS::StackName}-AgentId
  AgentArn:
    Description: Code Generator Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub ${AWS::StackName}-AgentArn
  AgentAliasId:
    Description: Code Generator Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub ${AWS::StackName}-AgentAliasId