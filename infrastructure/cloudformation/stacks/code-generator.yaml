AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AutoNinja Code Generator Stack - Bedrock Agent, Lambda function, and IAM roles
  for code generation.

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
    Default: production

  BedrockModel:
    Type: String
    Description: Foundation model ID for Bedrock Agent
    Default: us.amazon.nova-premier-v1:0

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages and CloudFormation templates
    Default: autoninja-deployment-artifacts-us-east-2

  InferenceRecordsTableName:
    Type: String
    Description: DynamoDB inference records table name

  InferenceRecordsTableArn:
    Type: String
    Description: DynamoDB inference records table ARN

  ArtifactsBucketName:
    Type: String
    Description: S3 artifacts bucket name

  ArtifactsBucketArn:
    Type: String
    Description: S3 artifacts bucket ARN

  LambdaBasePolicyArn:
    Type: String
    Description: ARN of the base Lambda policy

  LambdaLayerArn:
    Type: String
    Description: ARN of the shared Lambda layer

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30

  AgentCoreMemoryId:
    Type: String
    Description: AgentCore Memory ID for global rate limiting

  AgentCoreMemoryArn:
    Type: String
    Description: AgentCore Memory ARN for global rate limiting

Resources:
  # ============================================================================
  # IAM Role - Lambda Execution
  # ============================================================================
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasePolicyArn
      Policies:
        - PolicyName: ComprehensiveAgentAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockModelAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/${BedrockModel}"
              - Sid: BedrockGeneralAccess
                Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/autoninja-*:*"
              - Sid: XRayAccess
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Sid: DynamoDBInferenceRecordsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref InferenceRecordsTableArn
                  - !Sub "${InferenceRecordsTableArn}/index/*"
              - Sid: S3ArtifactsAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Ref ArtifactsBucketArn
                  - !Sub "${ArtifactsBucketArn}/*"
              - Sid: S3DeploymentAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/lambda/*"
              - Sid: S3SchemasAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn
              - Sid: CloudFormationReadAccess
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/autoninja-collaborators-*/*"
              - Sid: BedrockAgentInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*"
      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Lambda Function
  # ============================================================================
  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "autoninja-code-generator-${Environment}"
  #     Description: Code Generator Lambda function for AutoNinja
  #     Runtime: python3.12
  #     Handler: handler.lambda_handler
  #     Code:
  #       S3Bucket: !Ref DeploymentBucket
  #       S3Key: lambda/code-generator.zip
  #     Role: !GetAtt LambdaRole.Arn
  #     Timeout: 300
  #     MemorySize: 512
  #     Environment:
  #       Variables:
  #         LOG_LEVEL: INFO
  #         MEMORY_ID: !Ref AgentCoreMemoryId
  #         DYNAMODB_TABLE_NAME: !Ref InferenceRecordsTableName
  #         S3_BUCKET_NAME: !Ref ArtifactsBucketName
  #     Layers:
  #       - !Ref LambdaLayerArn
  #     TracingConfig:
  #       Mode: Active
  #     Tags:
  #       - Key: Application
  #         Value: AutoNinja

  # ============================================================================
  # IAM Role - Bedrock Agent
  # ============================================================================
  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
      Policies:
        - PolicyName: BedrockAgentPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/${BedrockModel}"
                  - !Sub "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - Effect: Allow
                Action:
                  - bedrock:GetInferenceProfile
                  - bedrock:GetFoundationModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}/schemas/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentBucket}"
              - Sid: AgentCoreMemoryAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:BatchCreateMemoryRecords
                Resource:
                  - !Ref AgentCoreMemoryArn

      Tags:
        - Key: Application
          Value: AutoNinja

  # ============================================================================
  # Bedrock Agent
  # ============================================================================
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "autoninja-code-generator-${Environment}"
      Description: Code Generator agent - generates Lambda code, agent configs, and OpenAPI schemas
      AgentResourceRoleArn: !GetAtt AgentRole.Arn
      FoundationModel: !Ref BedrockModel
      AgentCollaboration: DISABLED
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
      Instruction: |
        You are a Senior Software Engineer and AI Systems Developer specializing in AWS Lambda, Bedrock Agents, and production-grade Python development.
      PromptOverrideConfiguration:
        PromptConfigurations:
          - PromptType: ORCHESTRATION
            PromptCreationMode: OVERRIDDEN
            PromptState: ENABLED
            InferenceConfiguration:
              Temperature: 0.1
              StopSequences: []
            BasePromptTemplate: |
              {
                "schemaVersion": "messages-v1",
                "system": [
                  {
                    "text": "You are a Senior Software Engineer and AI Systems Developer with 12+ years of experience building production-grade applications. You specialize in AWS Lambda, Bedrock Agents, and enterprise software development with expertise in Python, security, performance optimization, and maintainable code architecture.\n\n## YOUR ROLE\n\nGenerate production-ready code packages for Bedrock Agents including Lambda handlers, business logic, OpenAPI schemas, agent configurations, and documentation.\n\n## CODE QUALITY STANDARDS\n\n- Write code that can handle production traffic from day one\n- Implement comprehensive error handling and graceful degradation\n- Include structured logging and observability hooks\n- Follow security best practices and input validation\n- Design for testability and maintainability\n- Follow PEP 8 and industry coding standards\n\n## OUTPUT FORMAT\n\nMake sure your final response is a valid JSON schema follow the below Response Schema:\n\n##Response Schema:\n```json\n{\n  \"lambda_code\": {\n    \"handler.py\": \"string\",\n    \"business_logic.py\": \"string\",\n    \"utils.py\": \"string\",\n    \"validators.py\": \"string\",\n    \"exceptions.py\": \"string\",\n    \"config.py\": \"string\",\n    \"requirements.txt\": \"string\"\n  },\n  \"agent_configuration\": {\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"instruction\": \"string\",\n    \"foundation_model\": \"string\",\n    \"idle_session_ttl\": \"number\",\n    \"action_groups\": [\"object\"]\n  },\n  \"openapi_schema\": {\n    \"openapi\": \"string\",\n    \"info\": \"object\",\n    \"paths\": \"object\",\n    \"components\": \"object\"\n  },\n  \"testing_framework\": {\n    \"unit_tests\": \"string\",\n    \"integration_tests\": \"string\",\n    \"test_data\": \"object\"\n  },\n  \"documentation\": {\n    \"readme.md\": \"string\",\n    \"api_docs.md\": \"string\",\n    \"deployment_guide.md\": \"string\"\n  }\n}\n```\n\n$prompt_session_attributes$"
                  }
                ],
                "messages": [
                  {
                    "role": "user",
                    "content": [
                      {
                        "text": "$question$"
                      }
                    ]
                  }
                ],
                "inferenceConfig": {
                  "temperature": 0,
                  "maxTokens": 64000,
                  "topP": 0.9,
                  "stopSequences": []
                },
                "additionalModelRequestFields": {
                  "inferenceConfig": {
                    "outputSchema": {
                      "type": "object",
                      "properties": {
                        "lambda_code": {
                          "type": "object",
                          "description": "Python code files for Lambda function",
                          "properties": {
                            "handler.py": {"type": "string"},
                            "business_logic.py": {"type": "string"},
                            "utils.py": {"type": "string"},
                            "validators.py": {"type": "string"},
                            "exceptions.py": {"type": "string"},
                            "config.py": {"type": "string"},
                            "requirements.txt": {"type": "string"}
                          },
                          "required": ["handler.py", "requirements.txt"]
                        },
                        "agent_configuration": {
                          "type": "object",
                          "properties": {
                            "name": {"type": "string"},
                            "description": {"type": "string"},
                            "instruction": {"type": "string"},
                            "foundation_model": {"type": "string"},
                            "idle_session_ttl": {"type": "number"},
                            "action_groups": {"type": "array"}
                          },
                          "required": ["name", "description", "instruction"]
                        },
                        "openapi_schema": {
                          "type": "object",
                          "properties": {
                            "openapi": {"type": "string"},
                            "info": {"type": "object"},
                            "paths": {"type": "object"},
                            "components": {"type": "object"}
                          },
                          "required": ["openapi", "info", "paths"]
                        },
                        "testing_framework": {
                          "type": "object",
                          "properties": {
                            "unit_tests": {"type": "string"},
                            "integration_tests": {"type": "string"},
                            "test_data": {"type": "object"}
                          }
                        },
                        "documentation": {
                          "type": "object",
                          "properties": {
                            "readme.md": {"type": "string"},
                            "api_docs.md": {"type": "string"},
                            "deployment_guide.md": {"type": "string"}
                          }
                        }
                      },
                      "required": ["lambda_code", "agent_configuration", "openapi_schema"]
                    }
                  }
                }
              }
      Tags:
        Application: AutoNinja

  # ============================================================================
  # Lambda Invoke Permission
  # ============================================================================
  # LambdaInvokePermission:
  # Type: AWS::Lambda::Permission
  # Properties:
  #   FunctionName: !Ref LambdaFunction
  #   Action: lambda:InvokeFunction
  #   Principal: bedrock.amazonaws.com
  #   SourceArn: !GetAtt Agent.AgentArn

  # ============================================================================
  # Bedrock Agent Alias
  # ============================================================================
  AgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: production
      Description: Production alias for Code Generator agent

Outputs:
  AgentId:
    Description: Code Generator Agent ID
    Value: !GetAtt Agent.AgentId
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"

  AgentArn:
    Description: Code Generator Agent ARN
    Value: !GetAtt Agent.AgentArn
    Export:
      Name: !Sub "${AWS::StackName}-AgentArn"

  AgentAliasId:
    Description: Code Generator Agent Alias ID
    Value: !GetAtt AgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-AgentAliasId"

  # LambdaFunctionArn:
  #   Description: Code Generator Lambda Function ARN
  #   Value: !GetAtt LambdaFunction.Arn
  #   Export:
  #     Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
